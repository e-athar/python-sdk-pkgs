# coding: utf-8


"""
IGNORE:
    Nutanix Prism Versioned APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from prism_client.Ntnx.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from prism_client.Ntnx.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from prism_client.Ntnx.prism.v4.config.CategoryAssociationSummary import CategoryAssociationSummary  # noqa: F401,E501
from prism_client.Ntnx.prism.v4.config.CategoryType import CategoryType  # noqa: F401,E501

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""

class CategorySummary(ExternalizableAbstractModel):
    """CategorySummary - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'fq_name': 'str',
        'name': 'str',
        'parent_ext_id': 'str',
        'user_specified_name': 'str',
        'type': 'prism.v4.config.CategoryType',
        'description': 'str',
        'associations': 'list[prism.v4.config.CategoryAssociationSummary]',
        'child_categories': 'list[prism.v4.config.CategorySummary]',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'fq_name': 'fqName',
        'name': 'name',
        'parent_ext_id': 'parentExtId',
        'user_specified_name': 'userSpecifiedName',
        'type': 'type',
        'description': 'description',
        'associations': 'associations',
        'child_categories': 'childCategories',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, fq_name=None, name=None, parent_ext_id=None, user_specified_name=None, type=None, description=None, associations=None, child_categories=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        """CategorySummary - a model defined in Swagger
            
        """
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self._fq_name = None
        self._name = None
        self._parent_ext_id = None
        self._user_specified_name = None
        self._type = None
        self._description = None
        self._associations = None
        self._child_categories = None
        self.discriminator = None
        if fq_name is not None:
            self._fq_name = fq_name
        if name is not None:
            self._name = name
        if parent_ext_id is not None:
            self._parent_ext_id = parent_ext_id
        if user_specified_name is not None:
            self._user_specified_name = user_specified_name
        if type is not None:
            self._type = type
        if description is not None:
            self._description = description
        if associations is not None:
            self._associations = associations
        if child_categories is not None:
            self._child_categories = child_categories

    def _initialize_object_type(self):
        return 'prism.v4.config.CategorySummary'

    def _initialize_fq_object_type(self):
        return 'prism.v4.r0.a1.config.CategorySummary'


    @property
    def fq_name(self):
        """`{ str }`
            \nFully qualified name of the category<br> A URL query parameter that filters a list of categories by performing a regex match on the `fqName` field.<br> It accepts a Perl compatible regex string. For example: `fqName=sample-.*` would return all categories whose `fqName` matches the regex `sample-.*`; like - `test-sample-1`, `sample-test` etc. 
        """ # noqa: E501
        return self._fq_name

    @fq_name.setter
    def fq_name(self, fq_name):
        if fq_name is not None and not re.search(r'^[a-zA-Z]+([a-zA-Z0-9_.-]+)*(\/([a-zA-Z]+([a-zA-Z0-9_.-]+)*))*$', fq_name):  # noqa: E501
            raise ValueError(r"Invalid value for `fq_name`, must be a follow pattern or equal to `/^[a-zA-Z]+([a-zA-Z0-9_.-]+)*(\/([a-zA-Z]+([a-zA-Z0-9_.-]+)*))*$/`")  # noqa: E501

        self._fq_name = fq_name

    @property
    def name(self):
        """`{ str }`
            \nName of the category<br> A URL query parameter that filters a list of categories by performing a regex match on the `name` field.<br> It accepts a Perl compatible regex string. For example: `name=sample-name-.*` would return all categories whose `name` matches the regex `sample-name-.*`; like - `test-sample-name-1`, `sample-name-test` etc. 
        """ # noqa: E501
        return self._name

    @name.setter
    def name(self, name):
        if name is not None and not re.search(r'^[a-zA-Z]+([a-zA-Z0-9_.-]+)*$', name):  # noqa: E501
            raise ValueError(r"Invalid value for `name`, must be a follow pattern or equal to `/^[a-zA-Z]+([a-zA-Z0-9_.-]+)*$/`")  # noqa: E501

        self._name = name

    @property
    def parent_ext_id(self):
        """`{ str }`
            \nThe parent category of this category (may be null if this category is not part of a hierarchy).<br> Each category can have at most one parent.<br> A parent cannot be deleted until all the children categories are first deleted.<br> Must be specified inside the post/put request body for child categories (if not specified, the service assumes the category to be a parent category).<br> This field is immutable. 
        """ # noqa: E501
        return self._parent_ext_id

    @parent_ext_id.setter
    def parent_ext_id(self, parent_ext_id):
        if parent_ext_id is not None and not re.search(r'^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', parent_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `parent_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self._parent_ext_id = parent_ext_id

    @property
    def user_specified_name(self):
        """`{ str }`
            \nThe user specified name is a string that the user can specify; with syntax and semantics controlled by the user.  The server does not validate this value nor does it enforce the uniqueness or any other constraints.<br> It is the responsibility of the user to ensure that any semantic or syntactic constraints are retained when mutating this field. Unlike the name of the categories, which is immutable, the user name can be freely changed by the user to meet their needs. 
        """ # noqa: E501
        return self._user_specified_name

    @user_specified_name.setter
    def user_specified_name(self, user_specified_name):

        self._user_specified_name = user_specified_name

    @property
    def type(self):
        """`{ prism.v4.config.CategoryType }`
            
        """ # noqa: E501
        return self._type

    @type.setter
    def type(self, type):

        self._type = type

    @property
    def description(self):
        """`{ str }`
            \nA string consisting of the description of the category as defined by the user.  The server does not validate this value nor does it enforce the uniqueness or any other constraints.<br> It is the responsibility of the user to ensure that any semantic or syntactic constraints are retained when mutating this field. 
        """ # noqa: E501
        return self._description

    @description.setter
    def description(self, description):

        self._description = description

    @property
    def associations(self):
        """`{ list[prism.v4.config.CategoryAssociationSummary] }`
            
        """ # noqa: E501
        return self._associations

    @associations.setter
    def associations(self, associations):

        self._associations = associations

    @property
    def child_categories(self):
        """`{ list[prism.v4.config.CategorySummary] }`
            
        """ # noqa: E501
        return self._child_categories

    @child_categories.setter
    def child_categories(self, child_categories):

        self._child_categories = child_categories

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CategorySummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CategorySummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

