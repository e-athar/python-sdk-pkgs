# coding: utf-8


"""
IGNORE:
    Nutanix Prism Versioned APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from prism_client.Ntnx.common.v1.config.Flag import Flag  # noqa: F401,E501
from prism_client.Ntnx.common.v1.config.KVPair import KVPair  # noqa: F401,E501
from prism_client.Ntnx.common.v1.config.Message import Message  # noqa: F401,E501
from prism_client.Ntnx.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""

class ApiResponseMetadata(object):
    """ApiResponseMetadata - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'flags': 'list[common.v1.config.Flag]',
        'links': 'list[common.v1.response.ApiLink]',
        'total_available_results': 'int',
        'messages': 'list[common.v1.config.Message]',
        'extra_info': 'list[common.v1.config.KVPair]',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'flags': 'flags',
        'links': 'links',
        'total_available_results': 'totalAvailableResults',
        'messages': 'messages',
        'extra_info': 'extraInfo',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, flags=None, links=None, total_available_results=None, messages=None, extra_info=None, *args, **kwargs):  # noqa: E501
        """ApiResponseMetadata - a model defined in Swagger
            \nThe metadata associated with an API response. Always present and minimally contains the self link for the API request that produced this response.  Also contains pagination data for paginated requests. 
        """
        self._flags = None
        self._links = None
        self._total_available_results = None
        self._messages = None
        self._extra_info = None
        self.discriminator = None
        if flags is not None:
            self._flags = flags
        if links is not None:
            self._links = links
        if total_available_results is not None:
            self._total_available_results = total_available_results
        if messages is not None:
            self._messages = messages
        if extra_info is not None:
            self._extra_info = extra_info
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'common.v1.response.ApiResponseMetadata'

    def _initialize_fq_object_type(self):
        return 'common.v1.r0.a3.response.ApiResponseMetadata'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__reserved = kwargs["_reserved"]
        elif "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__reserved = {"$fqObjectType": self._initialize_fq_object_type()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__unknown_fields = kwargs["_unknown_fields"]
        elif "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__object_type = kwargs["_object_type"]
        elif "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__object_type

    def get_reserved(self):
        return self.__reserved

    def get_unknown_fields(self):
        return self.__unknown_fields

    @property
    def flags(self):
        """`{ list[common.v1.config.Flag] }`
            
        """ # noqa: E501
        return self._flags

    @flags.setter
    def flags(self, flags):

        self._flags = flags

    @property
    def links(self):
        """`{ list[common.v1.response.ApiLink] }`
            
        """ # noqa: E501
        return self._links

    @links.setter
    def links(self, links):

        self._links = links

    @property
    def total_available_results(self):
        """`{ int }`
            
        """ # noqa: E501
        return self._total_available_results

    @total_available_results.setter
    def total_available_results(self, total_available_results):

        self._total_available_results = total_available_results

    @property
    def messages(self):
        """`{ list[common.v1.config.Message] }`
            
        """ # noqa: E501
        return self._messages

    @messages.setter
    def messages(self, messages):

        self._messages = messages

    @property
    def extra_info(self):
        """`{ list[common.v1.config.KVPair] }`
            \nAn array of entity specific metadata
        """ # noqa: E501
        return self._extra_info

    @extra_info.setter
    def extra_info(self, extra_info):

        self._extra_info = extra_info

    @property
    def _reserved(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__reserved

    @property
    def _object_type(self):
        """`{ str }`
            
        """ # noqa: E501
        return self.__object_type

    @property
    def _unknown_fields(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__unknown_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiResponseMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiResponseMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

