# coding: utf-8


"""
IGNORE:
    Nutanix Prism Versioned APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from prism_client.api_client import ApiClient


class CategoriesApi(object):
    """IGNORE:
    NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    IGNORE
    """ # noqa: E501

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_category(self, body, **kwargs):  # noqa: E501
        """Creates category 
        _Creates a new category using the provided request body._  The users need to specify the `name` of the category to be created and it's `parentExtId` (the extId of the parent category; if present) inside the request body. They can also provide a `description` and `userSpecifiedName` for the category inside the request body.  A sample request body would look like this: ``` { \"name\":\"sample-category\", \"parentExtId\": \"cafc8e9e-b595-46f8-8d43-f62746180a5b\", \"description\": \"This is a sample category\", \"userSpecifiedName\":\"sample-name\" } ```  If the user doesn't specify a `parentExtId` inside the request body, a root level category will be created.  ___Note:___ _Our service currently doesn't support providing `fqName`, `metadata` and `type` inside the request body. Adding them to the request body will not produce any error, but they won't be reflected in the created category_ 

        >>> response = api.create_category(body)

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_category(body, async_req=True)
        >>> result = thread.get()

        :param prism.v4.config.Category body: (required)
        :param bool async_req:
        :return: prism.v4.config.CategoryApiResponse

                 If the method is called asynchronously,
                 returns the request thread.
        """ # noqa: E501
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_category_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_category_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_category_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creates category 
        _Creates a new category using the provided request body._  The users need to specify the `name` of the category to be created and it's `parentExtId` (the extId of the parent category; if present) inside the request body. They can also provide a `description` and `userSpecifiedName` for the category inside the request body.  A sample request body would look like this: ``` { \"name\":\"sample-category\", \"parentExtId\": \"cafc8e9e-b595-46f8-8d43-f62746180a5b\", \"description\": \"This is a sample category\", \"userSpecifiedName\":\"sample-name\" } ```  If the user doesn't specify a `parentExtId` inside the request body, a root level category will be created.  ___Note:___ _Our service currently doesn't support providing `fqName`, `metadata` and `type` inside the request body. Adding them to the request body will not produce any error, but they won't be reflected in the created category_ 

        >>> response = api.create_category(body)

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_category_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param prism.v4.config.Category body: (required)
        :param bool async_req:
        :return: prism.v4.config.CategoryApiResponse

                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_category`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/prism/v4.0.a1/config/categories', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='prism.v4.config.CategoryApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_category_by_ext_id(self, extId, **kwargs):  # noqa: E501
        """Deletes category 
        _Deletes the category with the given external identifier._  The user has to specify inside the path parameter - a valid external identifier (`extId`) of the category to be deleted.  A sample call would look like this: ``` /prism/v2.a1/config/categories/cafc8e9e-b595-46f8-8d43-f62746180a5b ```  A category cannot be deleted in the following cases: - It has some child categories - It has some entities/policies asoociated with it - It is of type `SYSTEM` or `INTERNAL` 

        >>> response = api.delete_category_by_ext_id(extId)

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_category_by_ext_id(extId, async_req=True)
        >>> result = thread.get()

        :param str extId: A globally unique identifier of an instance that is suitable for external consumption.
 (required)
        :param bool async_req:
        :return: prism.v4.config.CategoryDeleteApiResponse

                 If the method is called asynchronously,
                 returns the request thread.
        """ # noqa: E501
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_category_by_ext_id_with_http_info(extId, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_category_by_ext_id_with_http_info(extId, **kwargs)  # noqa: E501
            return data

    def delete_category_by_ext_id_with_http_info(self, extId, **kwargs):  # noqa: E501
        """Deletes category 
        _Deletes the category with the given external identifier._  The user has to specify inside the path parameter - a valid external identifier (`extId`) of the category to be deleted.  A sample call would look like this: ``` /prism/v2.a1/config/categories/cafc8e9e-b595-46f8-8d43-f62746180a5b ```  A category cannot be deleted in the following cases: - It has some child categories - It has some entities/policies asoociated with it - It is of type `SYSTEM` or `INTERNAL` 

        >>> response = api.delete_category_by_ext_id(extId)

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_category_by_ext_id_with_http_info(extId, async_req=True)
        >>> result = thread.get()

        :param str extId: A globally unique identifier of an instance that is suitable for external consumption.
 (required)
        :param bool async_req:
        :return: prism.v4.config.CategoryDeleteApiResponse

                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['extId']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_category_by_ext_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'extId' is set
        if ('extId' not in params or
                params['extId'] is None):
            raise ValueError("Missing the required parameter `extId` when calling `delete_category_by_ext_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'extId' in params:
            path_params['extId'] = params['extId']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/prism/v4.0.a1/config/categories/{extId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='prism.v4.config.CategoryDeleteApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_categories(self, **kwargs):  # noqa: E501
        """Get category list 
        _Get a paginated list of categories._  Users can modify their requests by using query parameters like `fqName`, `name`, `extId` and `parentExtId`. Note that the `fqName` and `name` are treated as PCR regex while `extId` and `parentExtId` expect a comma separated list of external identifiers.  The users can chain their queries using the `&` operator. A sample call would look like this: ``` /prism/v2.a1/config/categories?name=sample&parentExtId=cafc8e9e-b595-46f8-8d43-f62746180a5b ```  Also, if the same query parameter is passed more than one times, only the first occurrence is considered. So, for example, if the user specifies a query like this: `?name=sample@1&name=sample@2`, the query considered would be `?name=sample@1`  The user can also specify pagination query parameters (`$page` and `$limit`) to navigate through the list. If these parameters are not specified, default values of `$page=0` and `$limit=50` are used. A sample call with pagination would look like this: ``` /prism/v2.a1/config/categories?$page=1&$limit=10 ```  If the user doesn't specify any search query parameters, a list of root level categories is returned. 

        >>> response = api.get_all_categories((optional) _page, (optional) _limit, (optional) _filter, (optional) _orderby, (optional) _expand)

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_all_categories(async_req=True)
        >>> result = thread.get()

        :param int _page: A URL query parameter that specifies the page number of the result set.  Must be a positive integer between 0 and the maximum number of pages that are available for that resource.  Any number out of this range will be set to its nearest bound.  In other words, a page number of less than 0 would be set to 0 and a page number greater than the total available pages would be set to the last page.

        :param int _limit: A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 0 and 100. Any number out of this range will be set to the default maximum number of records, which is 100.

        :param str _filter: A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the OData V4.01 URL conventions.
        The filter can be applied on following fields:
        
        - extId
        - fqName
        - name
        - parentExtId
        - type
        
        :param str _orderby: A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified the resources will be sorted in ascending order by default. For example 'orderby=templateName desc' would get all templates sorted by templateName in desc order.
        The orderby can be applied on following fields:
        
        - fqName
        - name
        
        :param str _expand: Odata query for expanding list api response
        :param bool async_req:
        :return: prism.v4.config.CategorySummaryListApiResponse

                 If the method is called asynchronously,
                 returns the request thread.
        """ # noqa: E501
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_categories_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_categories_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_categories_with_http_info(self, **kwargs):  # noqa: E501
        """Get category list 
        _Get a paginated list of categories._  Users can modify their requests by using query parameters like `fqName`, `name`, `extId` and `parentExtId`. Note that the `fqName` and `name` are treated as PCR regex while `extId` and `parentExtId` expect a comma separated list of external identifiers.  The users can chain their queries using the `&` operator. A sample call would look like this: ``` /prism/v2.a1/config/categories?name=sample&parentExtId=cafc8e9e-b595-46f8-8d43-f62746180a5b ```  Also, if the same query parameter is passed more than one times, only the first occurrence is considered. So, for example, if the user specifies a query like this: `?name=sample@1&name=sample@2`, the query considered would be `?name=sample@1`  The user can also specify pagination query parameters (`$page` and `$limit`) to navigate through the list. If these parameters are not specified, default values of `$page=0` and `$limit=50` are used. A sample call with pagination would look like this: ``` /prism/v2.a1/config/categories?$page=1&$limit=10 ```  If the user doesn't specify any search query parameters, a list of root level categories is returned. 

        >>> response = api.get_all_categories((optional) _page, (optional) _limit, (optional) _filter, (optional) _orderby, (optional) _expand)

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_all_categories_with_http_info(async_req=True)
        >>> result = thread.get()

        :param int _page: A URL query parameter that specifies the page number of the result set.  Must be a positive integer between 0 and the maximum number of pages that are available for that resource.  Any number out of this range will be set to its nearest bound.  In other words, a page number of less than 0 would be set to 0 and a page number greater than the total available pages would be set to the last page.

        :param int _limit: A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 0 and 100. Any number out of this range will be set to the default maximum number of records, which is 100.

        :param str _filter: A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the OData V4.01 URL conventions.
        The filter can be applied on following fields:
        
        - extId
        - fqName
        - name
        - parentExtId
        - type
        
        :param str _orderby: A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified the resources will be sorted in ascending order by default. For example 'orderby=templateName desc' would get all templates sorted by templateName in desc order.
        The orderby can be applied on following fields:
        
        - fqName
        - name
        
        :param str _expand: Odata query for expanding list api response
        :param bool async_req:
        :return: prism.v4.config.CategorySummaryListApiResponse

                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_page', '_limit', '_filter', '_orderby', '_expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_categories" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_page' in params:
            query_params.append(('$page', params['_page']))  # noqa: E501
        if '_limit' in params:
            query_params.append(('$limit', params['_limit']))  # noqa: E501
        if '_filter' in params:
            query_params.append(('$filter', params['_filter']))  # noqa: E501
        if '_orderby' in params:
            query_params.append(('$orderby', params['_orderby']))  # noqa: E501
        if '_expand' in params:
            query_params.append(('$expand', params['_expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/prism/v4.0.a1/config/categories', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='prism.v4.config.CategorySummaryListApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_associations_for_category(self, extId, **kwargs):  # noqa: E501
        """Get category entity references 
        _Get a paginated list of entity references for the given category and given entity type._  The user has to specify inside the path parameter - a valid external identifier (`extId`) of the category, whose entityReferences are to be fetched. They can use the `$entityType` query parameter to specify the entity type of the enities whose references are to be fetched. If the `$entityType` query parameter is not specified, we return the entity references belonging to VM type.  The user can also specify pagination query parameters (`$page` and `$limit`) to navigate through the list. If these parameters are not specified, default values of `$page=0` and `$limit=50` are used. A sample call with pagination would look like this: ``` /prism/v2.a1/config/categories/cafc8e9e-b595-46f8-8d43-f62746180a5b/entityReferences?$page=1&$limit=10 ``` 

        >>> response = api.get_associations_for_category(extId, (optional) _page, (optional) _limit, (optional) _filter)

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_associations_for_category(extId, async_req=True)
        >>> result = thread.get()

        :param str extId: A globally unique identifier of an instance that is suitable for external consumption.
 (required)
        :param int _page: A URL query parameter that specifies the page number of the result set.  Must be a positive integer between 0 and the maximum number of pages that are available for that resource.  Any number out of this range will be set to its nearest bound.  In other words, a page number of less than 0 would be set to 0 and a page number greater than the total available pages would be set to the last page.

        :param int _limit: A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 0 and 100. Any number out of this range will be set to the default maximum number of records, which is 100.

        :param str _filter: A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the OData V4.01 URL conventions.
        The filter can be applied on following fields:
        
        - categoryId
        - resourceType
        
        :param bool async_req:
        :return: prism.v4.config.AssociationDetailApiResponse

                 If the method is called asynchronously,
                 returns the request thread.
        """ # noqa: E501
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_associations_for_category_with_http_info(extId, **kwargs)  # noqa: E501
        else:
            (data) = self.get_associations_for_category_with_http_info(extId, **kwargs)  # noqa: E501
            return data

    def get_associations_for_category_with_http_info(self, extId, **kwargs):  # noqa: E501
        """Get category entity references 
        _Get a paginated list of entity references for the given category and given entity type._  The user has to specify inside the path parameter - a valid external identifier (`extId`) of the category, whose entityReferences are to be fetched. They can use the `$entityType` query parameter to specify the entity type of the enities whose references are to be fetched. If the `$entityType` query parameter is not specified, we return the entity references belonging to VM type.  The user can also specify pagination query parameters (`$page` and `$limit`) to navigate through the list. If these parameters are not specified, default values of `$page=0` and `$limit=50` are used. A sample call with pagination would look like this: ``` /prism/v2.a1/config/categories/cafc8e9e-b595-46f8-8d43-f62746180a5b/entityReferences?$page=1&$limit=10 ``` 

        >>> response = api.get_associations_for_category(extId, (optional) _page, (optional) _limit, (optional) _filter)

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_associations_for_category_with_http_info(extId, async_req=True)
        >>> result = thread.get()

        :param str extId: A globally unique identifier of an instance that is suitable for external consumption.
 (required)
        :param int _page: A URL query parameter that specifies the page number of the result set.  Must be a positive integer between 0 and the maximum number of pages that are available for that resource.  Any number out of this range will be set to its nearest bound.  In other words, a page number of less than 0 would be set to 0 and a page number greater than the total available pages would be set to the last page.

        :param int _limit: A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 0 and 100. Any number out of this range will be set to the default maximum number of records, which is 100.

        :param str _filter: A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the OData V4.01 URL conventions.
        The filter can be applied on following fields:
        
        - categoryId
        - resourceType
        
        :param bool async_req:
        :return: prism.v4.config.AssociationDetailApiResponse

                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['extId', '_page', '_limit', '_filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_associations_for_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'extId' is set
        if ('extId' not in params or
                params['extId'] is None):
            raise ValueError("Missing the required parameter `extId` when calling `get_associations_for_category`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'extId' in params:
            path_params['extId'] = params['extId']  # noqa: E501

        query_params = []
        if '_page' in params:
            query_params.append(('$page', params['_page']))  # noqa: E501
        if '_limit' in params:
            query_params.append(('$limit', params['_limit']))  # noqa: E501
        if '_filter' in params:
            query_params.append(('$filter', params['_filter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/prism/v4.0.a1/config/categories/{extId}/associations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='prism.v4.config.AssociationDetailApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_category_by_ext_id(self, extId, **kwargs):  # noqa: E501
        """Get category by extId 
        _Get a category with the given external identifier._  The user has to specify inside the path parameter - a valid external identifier (`extId`) of the category to be fetched. They can also choose to fetch either a summarised view (`$view=summary`) or a detailed view (`$view=detail`) by providing the `$view` query parameter. Note that if the `$view` query parameter is not specified, a `summary` view of the response is returned.  A sample call would look like this: ``` /prism/v2.a1/config/categories/cafc8e9e-b595-46f8-8d43-f62746180a5b?$view=detail ```  The difference between the `detail` view and the `summary` view is that the former also fetches a list of the given category's child categories (along with the navigation link) _and_ also provides navigation links for querying entityReferences of each entityType available. 

        >>> response = api.get_category_by_ext_id(extId, (optional) _expand)

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_category_by_ext_id(extId, async_req=True)
        >>> result = thread.get()

        :param str extId: A globally unique identifier of an instance that is suitable for external consumption.
 (required)
        :param str _expand: Odata query for expanding list api response
        :param bool async_req:
        :return: prism.v4.config.CategoryGetResponses

                 If the method is called asynchronously,
                 returns the request thread.
        """ # noqa: E501
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_category_by_ext_id_with_http_info(extId, **kwargs)  # noqa: E501
        else:
            (data) = self.get_category_by_ext_id_with_http_info(extId, **kwargs)  # noqa: E501
            return data

    def get_category_by_ext_id_with_http_info(self, extId, **kwargs):  # noqa: E501
        """Get category by extId 
        _Get a category with the given external identifier._  The user has to specify inside the path parameter - a valid external identifier (`extId`) of the category to be fetched. They can also choose to fetch either a summarised view (`$view=summary`) or a detailed view (`$view=detail`) by providing the `$view` query parameter. Note that if the `$view` query parameter is not specified, a `summary` view of the response is returned.  A sample call would look like this: ``` /prism/v2.a1/config/categories/cafc8e9e-b595-46f8-8d43-f62746180a5b?$view=detail ```  The difference between the `detail` view and the `summary` view is that the former also fetches a list of the given category's child categories (along with the navigation link) _and_ also provides navigation links for querying entityReferences of each entityType available. 

        >>> response = api.get_category_by_ext_id(extId, (optional) _expand)

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_category_by_ext_id_with_http_info(extId, async_req=True)
        >>> result = thread.get()

        :param str extId: A globally unique identifier of an instance that is suitable for external consumption.
 (required)
        :param str _expand: Odata query for expanding list api response
        :param bool async_req:
        :return: prism.v4.config.CategoryGetResponses

                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['extId', '_expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_category_by_ext_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'extId' is set
        if ('extId' not in params or
                params['extId'] is None):
            raise ValueError("Missing the required parameter `extId` when calling `get_category_by_ext_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'extId' in params:
            path_params['extId'] = params['extId']  # noqa: E501

        query_params = []
        if '_expand' in params:
            query_params.append(('$expand', params['_expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/prism/v4.0.a1/config/categories/{extId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='prism.v4.config.CategoryGetResponses',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_category(self, body, extId, **kwargs):  # noqa: E501
        """Update category 
        _Updates the category with the given external identifier using the provided request body._  The user has to specify inside the path parameter - a valid external identifier (`extId`) of the category to be updated. They also need to provide a request body for performing the update. They need to specify the `name` of the category to be created and it's `parentExtId` (the extId of the parent category; if present) inside the request body. They can provide an updated value of `description` and `userSpecifiedName` for the category inside the request body.  A sample request body would look like this: ``` { \"name\":\"sample-category\", \"parentExtId\": \"cafc8e9e-b595-46f8-8d43-f62746180a5b\", \"description\": \"This is the updated description\", \"userSpecifiedName\":\"sample-name-updated\" } ```  The fields `name` and `parentExtId` are immutable, hence the user cannot modify them inside this update call. Also, since this is a `PUT` call, the user needs to specify these fields inside the request body (otherwise a 400 error code will be returned). If the category to be updated is a root category, do not specify the `parentExtId` field.  ___Note:___ _Our service currently doesn't support providing `fqName`, `metadata` and `type` inside the request body. Adding them to the request body will not produce any error, but they won't be reflected in the created category._ 

        >>> response = api.update_category(body, extId)

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_category(body, extId, async_req=True)
        >>> result = thread.get()

        :param prism.v4.config.Category body: (required)
        :param str extId: A globally unique identifier of an instance that is suitable for external consumption.
 (required)
        :param bool async_req:
        :return: prism.v4.config.CategoryPutResponses

                 If the method is called asynchronously,
                 returns the request thread.
        """ # noqa: E501
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_category_with_http_info(body, extId, **kwargs)  # noqa: E501
        else:
            (data) = self.update_category_with_http_info(body, extId, **kwargs)  # noqa: E501
            return data

    def update_category_with_http_info(self, body, extId, **kwargs):  # noqa: E501
        """Update category 
        _Updates the category with the given external identifier using the provided request body._  The user has to specify inside the path parameter - a valid external identifier (`extId`) of the category to be updated. They also need to provide a request body for performing the update. They need to specify the `name` of the category to be created and it's `parentExtId` (the extId of the parent category; if present) inside the request body. They can provide an updated value of `description` and `userSpecifiedName` for the category inside the request body.  A sample request body would look like this: ``` { \"name\":\"sample-category\", \"parentExtId\": \"cafc8e9e-b595-46f8-8d43-f62746180a5b\", \"description\": \"This is the updated description\", \"userSpecifiedName\":\"sample-name-updated\" } ```  The fields `name` and `parentExtId` are immutable, hence the user cannot modify them inside this update call. Also, since this is a `PUT` call, the user needs to specify these fields inside the request body (otherwise a 400 error code will be returned). If the category to be updated is a root category, do not specify the `parentExtId` field.  ___Note:___ _Our service currently doesn't support providing `fqName`, `metadata` and `type` inside the request body. Adding them to the request body will not produce any error, but they won't be reflected in the created category._ 

        >>> response = api.update_category(body, extId)

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_category_with_http_info(body, extId, async_req=True)
        >>> result = thread.get()

        :param prism.v4.config.Category body: (required)
        :param str extId: A globally unique identifier of an instance that is suitable for external consumption.
 (required)
        :param bool async_req:
        :return: prism.v4.config.CategoryPutResponses

                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'extId']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_category`")  # noqa: E501
        # verify the required parameter 'extId' is set
        if ('extId' not in params or
                params['extId'] is None):
            raise ValueError("Missing the required parameter `extId` when calling `update_category`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'extId' in params:
            path_params['extId'] = params['extId']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/prism/v4.0.a1/config/categories/{extId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='prism.v4.config.CategoryPutResponses',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
