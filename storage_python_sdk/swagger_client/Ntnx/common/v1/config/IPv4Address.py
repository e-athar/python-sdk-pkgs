# coding: utf-8


"""
    Storage APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 16.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re  # noqa: F401

import six


class IPv4Address(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'value': 'str',
        'prefix_length': 'int',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'value': 'value',
        'prefix_length': 'prefixLength',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }


    def __init__(self, value=None, prefix_length=32, *args, **kwargs):  # noqa: E501
        """IPv4Address - a model defined in Swagger"""  # noqa: E501
        self._value = None
        self._prefix_length = None
        self.discriminator = None
        if value is not None:
            self._value = value
        if prefix_length is not None:
            self._prefix_length = prefix_length
        self.__reserved = {"$fqObjectType": self._initialize_fq_object_type()}
        self.__unknown_fields = {}
        self.__object_type = self._initialize_object_type()

    def _initialize_object_type(self):
        return 'common.v1.config.IPv4Address'

    def _initialize_fq_object_type(self):
        return 'common.v1.r0.a3.config.IPv4Address'

    def get_object_type(self):
        return self.__object_type

    def get_reserved(self):
        return self.__reserved

    def get_unknown_fields(self):
        return self.__unknown_fields

    @property
    def value(self):
        """Gets the value of this IPv4Address.  # noqa: E501


        :return: The value of this IPv4Address.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this IPv4Address.


        :param value: The value of this IPv4Address.  # noqa: E501
        :type: str
        """
        if value is not None and not re.search(r'^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$', value):  # noqa: E501
            raise ValueError(r"Invalid value for `value`, must be a follow pattern or equal to `/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/`")  # noqa: E501

        self._value = value

    @property
    def prefix_length(self):
        """Gets the prefix_length of this IPv4Address.  # noqa: E501

        Prefix length of the network to which this host IPv4 address belongs.   # noqa: E501

        :return: The prefix_length of this IPv4Address.  # noqa: E501
        :rtype: int
        """
        return self._prefix_length

    @prefix_length.setter
    def prefix_length(self, prefix_length):
        """Sets the prefix_length of this IPv4Address.

        Prefix length of the network to which this host IPv4 address belongs.   # noqa: E501

        :param prefix_length: The prefix_length of this IPv4Address.  # noqa: E501
        :type: int
        """
        if prefix_length is not None and prefix_length > 32:  # noqa: E501
            raise ValueError("Invalid value for `prefix_length`, must be a value less than or equal to `32`")  # noqa: E501
        if prefix_length is not None and prefix_length < 0:  # noqa: E501
            raise ValueError("Invalid value for `prefix_length`, must be a value greater than or equal to `0`")  # noqa: E501

        self._prefix_length = prefix_length

    @property
    def _reserved(self):
        """Gets the _reserved of this IPv4Address.  # noqa: E501


        :return: The _reserved of this IPv4Address.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self.__reserved

    @property
    def _object_type(self):
        """Gets the _object_type of this IPv4Address.  # noqa: E501


        :return: The _object_type of this IPv4Address.  # noqa: E501
        :rtype: str
        """
        return self.__object_type

    @property
    def _unknown_fields(self):
        """Gets the _unknown_fields of this IPv4Address.  # noqa: E501


        :return: The _unknown_fields of this IPv4Address.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self.__unknown_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IPv4Address, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IPv4Address):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

