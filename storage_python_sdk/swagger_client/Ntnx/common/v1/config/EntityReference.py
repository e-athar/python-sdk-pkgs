# coding: utf-8


"""
    Storage APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 16.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re  # noqa: F401

import six
from swagger_client.Ntnx.common.v1.config.EntityType import EntityType  # noqa: F401,E501


class EntityReference(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ext_id': 'str',
        'name': 'str',
        'uris': 'list[str]',
        'entity_type': 'common.v1.config.EntityType',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'ext_id': 'extId',
        'name': 'name',
        'uris': 'uris',
        'entity_type': 'entityType',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }


    def __init__(self, ext_id=None, name=None, uris=None, entity_type=None, *args, **kwargs):  # noqa: E501
        """EntityReference - a model defined in Swagger"""  # noqa: E501
        self._ext_id = None
        self._name = None
        self._uris = None
        self._entity_type = None
        self.discriminator = None
        if ext_id is not None:
            self._ext_id = ext_id
        if name is not None:
            self._name = name
        if uris is not None:
            self._uris = uris
        if entity_type is not None:
            self._entity_type = entity_type
        self.__reserved = {"$fqObjectType": self._initialize_fq_object_type()}
        self.__unknown_fields = {}
        self.__object_type = self._initialize_object_type()

    def _initialize_object_type(self):
        return 'common.v1.config.EntityReference'

    def _initialize_fq_object_type(self):
        return 'common.v1.r0.a3.config.EntityReference'

    def get_object_type(self):
        return self.__object_type

    def get_reserved(self):
        return self.__reserved

    def get_unknown_fields(self):
        return self.__unknown_fields

    @property
    def ext_id(self):
        """Gets the ext_id of this EntityReference.  # noqa: E501


        :return: The ext_id of this EntityReference.  # noqa: E501
        :rtype: str
        """
        return self._ext_id

    @ext_id.setter
    def ext_id(self, ext_id):
        """Sets the ext_id of this EntityReference.


        :param ext_id: The ext_id of this EntityReference.  # noqa: E501
        :type: str
        """
        if ext_id is not None and not re.search(r'^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self._ext_id = ext_id

    @property
    def name(self):
        """Gets the name of this EntityReference.  # noqa: E501


        :return: The name of this EntityReference.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EntityReference.


        :param name: The name of this EntityReference.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def uris(self):
        """Gets the uris of this EntityReference.  # noqa: E501


        :return: The uris of this EntityReference.  # noqa: E501
        :rtype: list[str]
        """
        return self._uris

    @uris.setter
    def uris(self, uris):
        """Sets the uris of this EntityReference.


        :param uris: The uris of this EntityReference.  # noqa: E501
        :type: list[str]
        """

        self._uris = uris

    @property
    def entity_type(self):
        """Gets the entity_type of this EntityReference.  # noqa: E501


        :return: The entity_type of this EntityReference.  # noqa: E501
        :rtype: common.v1.config.EntityType
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this EntityReference.


        :param entity_type: The entity_type of this EntityReference.  # noqa: E501
        :type: common.v1.config.EntityType
        """

        self._entity_type = entity_type

    @property
    def _reserved(self):
        """Gets the _reserved of this EntityReference.  # noqa: E501


        :return: The _reserved of this EntityReference.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self.__reserved

    @property
    def _object_type(self):
        """Gets the _object_type of this EntityReference.  # noqa: E501


        :return: The _object_type of this EntityReference.  # noqa: E501
        :rtype: str
        """
        return self.__object_type

    @property
    def _unknown_fields(self):
        """Gets the _unknown_fields of this EntityReference.  # noqa: E501


        :return: The _unknown_fields of this EntityReference.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self.__unknown_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EntityReference, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntityReference):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

