# coding: utf-8


"""
    Storage APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 16.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re  # noqa: F401

import six


class EntityType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    _UNKNOWN = "$UNKNOWN"
    _REDACTED = "$REDACTED"
    CLUSTER = "CLUSTER"
    VM = "VM"
    STORAGE_CONTAINER = "STORAGE_CONTAINER"
    VOLUME_GROUP = "VOLUME_GROUP"
    TASK = "TASK"
    IMAGE = "IMAGE"
    CATEGORY = "CATEGORY"
    NODE = "NODE"
    VPC = "VPC"
    SUBNET = "SUBNET"
    ROUTING_POLICY = "ROUTING_POLICY"
    FLOATING_IP = "FLOATING_IP"
    VPN_GATEWAY = "VPN_GATEWAY"
    VPN_CONNECTION = "VPN_CONNECTION"
    DIRECT_CONNECT = "DIRECT_CONNECT"
    DIRECT_CONNECT_VIF = "DIRECT_CONNECT_VIF"
    VIRTUAL_NIC = "VIRTUAL_NIC"
    VIRTUAL_SWITCH = "VIRTUAL_SWITCH"
    VM_DISK = "VM_DISK"
    VOLUME_DISK = "VOLUME_DISK"
    DISK_RECOVERY_POINT = "DISK_RECOVERY_POINT"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }


    def __init__(self, *args, **kwargs):  # noqa: E501
        """EntityType - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None
        self.__reserved = {"$fqObjectType": self._initialize_fq_object_type()}
        self.__unknown_fields = {}
        self.__object_type = self._initialize_object_type()

    def _initialize_object_type(self):
        return 'common.v1.config.EntityType'

    def _initialize_fq_object_type(self):
        return 'common.v1.r0.a3.config.EntityType'

    def get_object_type(self):
        return self.__object_type

    def get_reserved(self):
        return self.__reserved

    def get_unknown_fields(self):
        return self.__unknown_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EntityType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntityType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

