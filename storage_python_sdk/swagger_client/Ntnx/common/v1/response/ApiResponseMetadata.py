# coding: utf-8


"""
    Storage APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 16.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re  # noqa: F401

import six
from swagger_client.Ntnx.common.v1.config.Flag import Flag  # noqa: F401,E501
from swagger_client.Ntnx.common.v1.config.KVPair import KVPair  # noqa: F401,E501
from swagger_client.Ntnx.common.v1.config.Message import Message  # noqa: F401,E501
from swagger_client.Ntnx.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501


class ApiResponseMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'flags': 'list[common.v1.config.Flag]',
        'links': 'list[common.v1.response.ApiLink]',
        'total_available_results': 'int',
        'messages': 'list[common.v1.config.Message]',
        'extra_info': 'list[common.v1.config.KVPair]',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'flags': 'flags',
        'links': 'links',
        'total_available_results': 'totalAvailableResults',
        'messages': 'messages',
        'extra_info': 'extraInfo',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }


    def __init__(self, flags=None, links=None, total_available_results=None, messages=None, extra_info=None, *args, **kwargs):  # noqa: E501
        """ApiResponseMetadata - a model defined in Swagger"""  # noqa: E501
        self._flags = None
        self._links = None
        self._total_available_results = None
        self._messages = None
        self._extra_info = None
        self.discriminator = None
        if flags is not None:
            self._flags = flags
        if links is not None:
            self._links = links
        if total_available_results is not None:
            self._total_available_results = total_available_results
        if messages is not None:
            self._messages = messages
        if extra_info is not None:
            self._extra_info = extra_info
        self.__reserved = {"$fqObjectType": self._initialize_fq_object_type()}
        self.__unknown_fields = {}
        self.__object_type = self._initialize_object_type()

    def _initialize_object_type(self):
        return 'common.v1.response.ApiResponseMetadata'

    def _initialize_fq_object_type(self):
        return 'common.v1.r0.a3.response.ApiResponseMetadata'

    def get_object_type(self):
        return self.__object_type

    def get_reserved(self):
        return self.__reserved

    def get_unknown_fields(self):
        return self.__unknown_fields

    @property
    def flags(self):
        """Gets the flags of this ApiResponseMetadata.  # noqa: E501


        :return: The flags of this ApiResponseMetadata.  # noqa: E501
        :rtype: list[common.v1.config.Flag]
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this ApiResponseMetadata.


        :param flags: The flags of this ApiResponseMetadata.  # noqa: E501
        :type: list[common.v1.config.Flag]
        """

        self._flags = flags

    @property
    def links(self):
        """Gets the links of this ApiResponseMetadata.  # noqa: E501


        :return: The links of this ApiResponseMetadata.  # noqa: E501
        :rtype: list[common.v1.response.ApiLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ApiResponseMetadata.


        :param links: The links of this ApiResponseMetadata.  # noqa: E501
        :type: list[common.v1.response.ApiLink]
        """

        self._links = links

    @property
    def total_available_results(self):
        """Gets the total_available_results of this ApiResponseMetadata.  # noqa: E501


        :return: The total_available_results of this ApiResponseMetadata.  # noqa: E501
        :rtype: int
        """
        return self._total_available_results

    @total_available_results.setter
    def total_available_results(self, total_available_results):
        """Sets the total_available_results of this ApiResponseMetadata.


        :param total_available_results: The total_available_results of this ApiResponseMetadata.  # noqa: E501
        :type: int
        """

        self._total_available_results = total_available_results

    @property
    def messages(self):
        """Gets the messages of this ApiResponseMetadata.  # noqa: E501


        :return: The messages of this ApiResponseMetadata.  # noqa: E501
        :rtype: list[common.v1.config.Message]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this ApiResponseMetadata.


        :param messages: The messages of this ApiResponseMetadata.  # noqa: E501
        :type: list[common.v1.config.Message]
        """

        self._messages = messages

    @property
    def extra_info(self):
        """Gets the extra_info of this ApiResponseMetadata.  # noqa: E501

        An array of entity specific metadata  # noqa: E501

        :return: The extra_info of this ApiResponseMetadata.  # noqa: E501
        :rtype: list[common.v1.config.KVPair]
        """
        return self._extra_info

    @extra_info.setter
    def extra_info(self, extra_info):
        """Sets the extra_info of this ApiResponseMetadata.

        An array of entity specific metadata  # noqa: E501

        :param extra_info: The extra_info of this ApiResponseMetadata.  # noqa: E501
        :type: list[common.v1.config.KVPair]
        """

        self._extra_info = extra_info

    @property
    def _reserved(self):
        """Gets the _reserved of this ApiResponseMetadata.  # noqa: E501


        :return: The _reserved of this ApiResponseMetadata.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self.__reserved

    @property
    def _object_type(self):
        """Gets the _object_type of this ApiResponseMetadata.  # noqa: E501


        :return: The _object_type of this ApiResponseMetadata.  # noqa: E501
        :rtype: str
        """
        return self.__object_type

    @property
    def _unknown_fields(self):
        """Gets the _unknown_fields of this ApiResponseMetadata.  # noqa: E501


        :return: The _unknown_fields of this ApiResponseMetadata.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self.__unknown_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiResponseMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiResponseMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

