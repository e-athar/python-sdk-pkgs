# coding: utf-8


"""
    Storage APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 16.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re  # noqa: F401

import six


class VolumeGroupMigrationSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'target_availability_zone_id': 'str',
        'target_cluster_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'target_availability_zone_id': 'targetAvailabilityZoneId',
        'target_cluster_id': 'targetClusterId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }


    def __init__(self, target_availability_zone_id=None, target_cluster_id=None, *args, **kwargs):  # noqa: E501
        """VolumeGroupMigrationSpec - a model defined in Swagger"""  # noqa: E501
        self._target_availability_zone_id = None
        self._target_cluster_id = None
        self.discriminator = None
        if target_availability_zone_id is not None:
            self._target_availability_zone_id = target_availability_zone_id
        if target_cluster_id is not None:
            self._target_cluster_id = target_cluster_id
        self.__reserved = {"$fqObjectType": self._initialize_fq_object_type()}
        self.__unknown_fields = {}
        self.__object_type = self._initialize_object_type()

    def _initialize_object_type(self):
        return 'storage.v4.config.VolumeGroupMigrationSpec'

    def _initialize_fq_object_type(self):
        return 'storage.v4.r0.a1.config.VolumeGroupMigrationSpec'

    def get_object_type(self):
        return self.__object_type

    def get_reserved(self):
        return self.__reserved

    def get_unknown_fields(self):
        return self.__unknown_fields

    @property
    def target_availability_zone_id(self):
        """Gets the target_availability_zone_id of this VolumeGroupMigrationSpec.  # noqa: E501

        Reference to the target Availability Zone where the Volume Group must be migrated.  # noqa: E501

        :return: The target_availability_zone_id of this VolumeGroupMigrationSpec.  # noqa: E501
        :rtype: str
        """
        return self._target_availability_zone_id

    @target_availability_zone_id.setter
    def target_availability_zone_id(self, target_availability_zone_id):
        """Sets the target_availability_zone_id of this VolumeGroupMigrationSpec.

        Reference to the target Availability Zone where the Volume Group must be migrated.  # noqa: E501

        :param target_availability_zone_id: The target_availability_zone_id of this VolumeGroupMigrationSpec.  # noqa: E501
        :type: str
        """
        if target_availability_zone_id is not None and not re.search(r'^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', target_availability_zone_id):  # noqa: E501
            raise ValueError(r"Invalid value for `target_availability_zone_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self._target_availability_zone_id = target_availability_zone_id

    @property
    def target_cluster_id(self):
        """Gets the target_cluster_id of this VolumeGroupMigrationSpec.  # noqa: E501

        Reference to the cluster in the target Availability Zone where the Volume Group must be migrated.  # noqa: E501

        :return: The target_cluster_id of this VolumeGroupMigrationSpec.  # noqa: E501
        :rtype: str
        """
        return self._target_cluster_id

    @target_cluster_id.setter
    def target_cluster_id(self, target_cluster_id):
        """Sets the target_cluster_id of this VolumeGroupMigrationSpec.

        Reference to the cluster in the target Availability Zone where the Volume Group must be migrated.  # noqa: E501

        :param target_cluster_id: The target_cluster_id of this VolumeGroupMigrationSpec.  # noqa: E501
        :type: str
        """
        if target_cluster_id is not None and not re.search(r'^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', target_cluster_id):  # noqa: E501
            raise ValueError(r"Invalid value for `target_cluster_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self._target_cluster_id = target_cluster_id

    @property
    def _reserved(self):
        """Gets the _reserved of this VolumeGroupMigrationSpec.  # noqa: E501


        :return: The _reserved of this VolumeGroupMigrationSpec.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self.__reserved

    @property
    def _object_type(self):
        """Gets the _object_type of this VolumeGroupMigrationSpec.  # noqa: E501


        :return: The _object_type of this VolumeGroupMigrationSpec.  # noqa: E501
        :rtype: str
        """
        return self.__object_type

    @property
    def _unknown_fields(self):
        """Gets the _unknown_fields of this VolumeGroupMigrationSpec.  # noqa: E501


        :return: The _unknown_fields of this VolumeGroupMigrationSpec.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self.__unknown_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VolumeGroupMigrationSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VolumeGroupMigrationSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

