# coding: utf-8


"""
    Storage APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 16.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re  # noqa: F401

import six
from swagger_client.Ntnx.storage.v4.config.FlashMode import FlashMode  # noqa: F401,E501


class StorageFeatures(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'flash_mode': 'storage.v4.config.FlashMode',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'flash_mode': 'flashMode',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }


    def __init__(self, flash_mode=None, *args, **kwargs):  # noqa: E501
        """StorageFeatures - a model defined in Swagger"""  # noqa: E501
        self._flash_mode = None
        self.discriminator = None
        if flash_mode is not None:
            self._flash_mode = flash_mode
        self.__reserved = {"$fqObjectType": self._initialize_fq_object_type()}
        self.__unknown_fields = {}
        self.__object_type = self._initialize_object_type()

    def _initialize_object_type(self):
        return 'storage.v4.config.StorageFeatures'

    def _initialize_fq_object_type(self):
        return 'storage.v4.r0.a1.config.StorageFeatures'

    def get_object_type(self):
        return self.__object_type

    def get_reserved(self):
        return self.__reserved

    def get_unknown_fields(self):
        return self.__unknown_fields

    @property
    def flash_mode(self):
        """Gets the flash_mode of this StorageFeatures.  # noqa: E501


        :return: The flash_mode of this StorageFeatures.  # noqa: E501
        :rtype: storage.v4.config.FlashMode
        """
        return self._flash_mode

    @flash_mode.setter
    def flash_mode(self, flash_mode):
        """Sets the flash_mode of this StorageFeatures.


        :param flash_mode: The flash_mode of this StorageFeatures.  # noqa: E501
        :type: storage.v4.config.FlashMode
        """

        self._flash_mode = flash_mode

    @property
    def _reserved(self):
        """Gets the _reserved of this StorageFeatures.  # noqa: E501


        :return: The _reserved of this StorageFeatures.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self.__reserved

    @property
    def _object_type(self):
        """Gets the _object_type of this StorageFeatures.  # noqa: E501


        :return: The _object_type of this StorageFeatures.  # noqa: E501
        :rtype: str
        """
        return self.__object_type

    @property
    def _unknown_fields(self):
        """Gets the _unknown_fields of this StorageFeatures.  # noqa: E501


        :return: The _unknown_fields of this StorageFeatures.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self.__unknown_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StorageFeatures, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageFeatures):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

