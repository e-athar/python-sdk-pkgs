# coding: utf-8


"""
    Storage APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 16.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re  # noqa: F401

import six
from swagger_client.Ntnx.common.v1.config.EntityReference import EntityReference  # noqa: F401,E501
from swagger_client.Ntnx.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from swagger_client.Ntnx.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from swagger_client.Ntnx.storage.v4.config.DiskStorageFeatures import DiskStorageFeatures  # noqa: F401,E501


class VolumeDisk(ExternalizableAbstractModel):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'index': 'int',
        'disk_size_bytes': 'int',
        'storage_container_id': 'str',
        'description': 'str',
        'disk_data_source_reference': 'common.v1.config.EntityReference',
        'disk_storage_features': 'storage.v4.config.DiskStorageFeatures',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'index': 'index',
        'disk_size_bytes': 'diskSizeBytes',
        'storage_container_id': 'storageContainerId',
        'description': 'description',
        'disk_data_source_reference': 'diskDataSourceReference',
        'disk_storage_features': 'diskStorageFeatures',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }


    def __init__(self, index=None, disk_size_bytes=None, storage_container_id=None, description=None, disk_data_source_reference=None, disk_storage_features=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        """VolumeDisk - a model defined in Swagger"""  # noqa: E501
        self._index = None
        self._disk_size_bytes = None
        self._storage_container_id = None
        self._description = None
        self._disk_data_source_reference = None
        self._disk_storage_features = None
        self.discriminator = None
        if index is not None:
            self._index = index
        if disk_size_bytes is not None:
            self._disk_size_bytes = disk_size_bytes
        if storage_container_id is not None:
            self._storage_container_id = storage_container_id
        if description is not None:
            self._description = description
        if disk_data_source_reference is not None:
            self._disk_data_source_reference = disk_data_source_reference
        if disk_storage_features is not None:
            self._disk_storage_features = disk_storage_features
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)

    def _initialize_object_type(self):
        return 'storage.v4.config.VolumeDisk'

    def _initialize_fq_object_type(self):
        return 'storage.v4.r0.a1.config.VolumeDisk'


    @property
    def index(self):
        """Gets the index of this VolumeDisk.  # noqa: E501

        Index of the disk in a Volume Group. This field is immutable.  # noqa: E501

        :return: The index of this VolumeDisk.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this VolumeDisk.

        Index of the disk in a Volume Group. This field is immutable.  # noqa: E501

        :param index: The index of this VolumeDisk.  # noqa: E501
        :type: int
        """
        if index is not None and index > 16383:  # noqa: E501
            raise ValueError("Invalid value for `index`, must be a value less than or equal to `16383`")  # noqa: E501
        if index is not None and index < 0:  # noqa: E501
            raise ValueError("Invalid value for `index`, must be a value greater than or equal to `0`")  # noqa: E501

        self._index = index

    @property
    def disk_size_bytes(self):
        """Gets the disk_size_bytes of this VolumeDisk.  # noqa: E501

        Size of the disk in bytes.  # noqa: E501

        :return: The disk_size_bytes of this VolumeDisk.  # noqa: E501
        :rtype: int
        """
        return self._disk_size_bytes

    @disk_size_bytes.setter
    def disk_size_bytes(self, disk_size_bytes):
        """Sets the disk_size_bytes of this VolumeDisk.

        Size of the disk in bytes.  # noqa: E501

        :param disk_size_bytes: The disk_size_bytes of this VolumeDisk.  # noqa: E501
        :type: int
        """
        if disk_size_bytes is not None and disk_size_bytes < 524288:  # noqa: E501
            raise ValueError("Invalid value for `disk_size_bytes`, must be a value greater than or equal to `524288`")  # noqa: E501

        self._disk_size_bytes = disk_size_bytes

    @property
    def storage_container_id(self):
        """Gets the storage_container_id of this VolumeDisk.  # noqa: E501

        Storage container on which the disk must be created.  # noqa: E501

        :return: The storage_container_id of this VolumeDisk.  # noqa: E501
        :rtype: str
        """
        return self._storage_container_id

    @storage_container_id.setter
    def storage_container_id(self, storage_container_id):
        """Sets the storage_container_id of this VolumeDisk.

        Storage container on which the disk must be created.  # noqa: E501

        :param storage_container_id: The storage_container_id of this VolumeDisk.  # noqa: E501
        :type: str
        """
        if storage_container_id is not None and not re.search(r'^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', storage_container_id):  # noqa: E501
            raise ValueError(r"Invalid value for `storage_container_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self._storage_container_id = storage_container_id

    @property
    def description(self):
        """Gets the description of this VolumeDisk.  # noqa: E501

        Description of the Volume disk.  # noqa: E501

        :return: The description of this VolumeDisk.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VolumeDisk.

        Description of the Volume disk.  # noqa: E501

        :param description: The description of this VolumeDisk.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 1000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1000`")  # noqa: E501

        self._description = description

    @property
    def disk_data_source_reference(self):
        """Gets the disk_data_source_reference of this VolumeDisk.  # noqa: E501


        :return: The disk_data_source_reference of this VolumeDisk.  # noqa: E501
        :rtype: common.v1.config.EntityReference
        """
        return self._disk_data_source_reference

    @disk_data_source_reference.setter
    def disk_data_source_reference(self, disk_data_source_reference):
        """Sets the disk_data_source_reference of this VolumeDisk.


        :param disk_data_source_reference: The disk_data_source_reference of this VolumeDisk.  # noqa: E501
        :type: common.v1.config.EntityReference
        """

        self._disk_data_source_reference = disk_data_source_reference

    @property
    def disk_storage_features(self):
        """Gets the disk_storage_features of this VolumeDisk.  # noqa: E501


        :return: The disk_storage_features of this VolumeDisk.  # noqa: E501
        :rtype: storage.v4.config.DiskStorageFeatures
        """
        return self._disk_storage_features

    @disk_storage_features.setter
    def disk_storage_features(self, disk_storage_features):
        """Sets the disk_storage_features of this VolumeDisk.


        :param disk_storage_features: The disk_storage_features of this VolumeDisk.  # noqa: E501
        :type: storage.v4.config.DiskStorageFeatures
        """

        self._disk_storage_features = disk_storage_features

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VolumeDisk, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VolumeDisk):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

