# coding: utf-8


"""
    Storage APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 16.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re  # noqa: F401

import six
from swagger_client.Ntnx.storage.v4.error.SchemaValidationErrorMessage import SchemaValidationErrorMessage  # noqa: F401,E501


class SchemaValidationError(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timestamp': 'str',
        'status_code': 'int',
        'error': 'str',
        'path': 'str',
        'validation_error_messages': 'list[storage.v4.error.SchemaValidationErrorMessage]',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'timestamp': 'timestamp',
        'status_code': 'statusCode',
        'error': 'error',
        'path': 'path',
        'validation_error_messages': 'validationErrorMessages',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }


    def __init__(self, timestamp=None, status_code=None, error=None, path=None, validation_error_messages=None, *args, **kwargs):  # noqa: E501
        """SchemaValidationError - a model defined in Swagger"""  # noqa: E501
        self._timestamp = None
        self._status_code = None
        self._error = None
        self._path = None
        self._validation_error_messages = None
        self.discriminator = None
        if timestamp is not None:
            self._timestamp = timestamp
        if status_code is not None:
            self._status_code = status_code
        if error is not None:
            self._error = error
        if path is not None:
            self._path = path
        if validation_error_messages is not None:
            self._validation_error_messages = validation_error_messages
        self.__reserved = {"$fqObjectType": self._initialize_fq_object_type()}
        self.__unknown_fields = {}
        self.__object_type = self._initialize_object_type()

    def _initialize_object_type(self):
        return 'storage.v4.error.SchemaValidationError'

    def _initialize_fq_object_type(self):
        return 'storage.v4.r0.a1.error.SchemaValidationError'

    def get_object_type(self):
        return self.__object_type

    def get_reserved(self):
        return self.__reserved

    def get_unknown_fields(self):
        return self.__unknown_fields

    @property
    def timestamp(self):
        """Gets the timestamp of this SchemaValidationError.  # noqa: E501


        :return: The timestamp of this SchemaValidationError.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this SchemaValidationError.


        :param timestamp: The timestamp of this SchemaValidationError.  # noqa: E501
        :type: str
        """

        self._timestamp = timestamp

    @property
    def status_code(self):
        """Gets the status_code of this SchemaValidationError.  # noqa: E501


        :return: The status_code of this SchemaValidationError.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this SchemaValidationError.


        :param status_code: The status_code of this SchemaValidationError.  # noqa: E501
        :type: int
        """

        self._status_code = status_code

    @property
    def error(self):
        """Gets the error of this SchemaValidationError.  # noqa: E501


        :return: The error of this SchemaValidationError.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this SchemaValidationError.


        :param error: The error of this SchemaValidationError.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def path(self):
        """Gets the path of this SchemaValidationError.  # noqa: E501


        :return: The path of this SchemaValidationError.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this SchemaValidationError.


        :param path: The path of this SchemaValidationError.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def validation_error_messages(self):
        """Gets the validation_error_messages of this SchemaValidationError.  # noqa: E501


        :return: The validation_error_messages of this SchemaValidationError.  # noqa: E501
        :rtype: list[storage.v4.error.SchemaValidationErrorMessage]
        """
        return self._validation_error_messages

    @validation_error_messages.setter
    def validation_error_messages(self, validation_error_messages):
        """Sets the validation_error_messages of this SchemaValidationError.


        :param validation_error_messages: The validation_error_messages of this SchemaValidationError.  # noqa: E501
        :type: list[storage.v4.error.SchemaValidationErrorMessage]
        """

        self._validation_error_messages = validation_error_messages

    @property
    def _reserved(self):
        """Gets the _reserved of this SchemaValidationError.  # noqa: E501


        :return: The _reserved of this SchemaValidationError.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self.__reserved

    @property
    def _object_type(self):
        """Gets the _object_type of this SchemaValidationError.  # noqa: E501


        :return: The _object_type of this SchemaValidationError.  # noqa: E501
        :rtype: str
        """
        return self.__object_type

    @property
    def _unknown_fields(self):
        """Gets the _unknown_fields of this SchemaValidationError.  # noqa: E501


        :return: The _unknown_fields of this SchemaValidationError.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self.__unknown_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SchemaValidationError, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SchemaValidationError):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

