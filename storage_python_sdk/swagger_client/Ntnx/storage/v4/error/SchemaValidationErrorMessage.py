# coding: utf-8


"""
    Storage APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 16.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re  # noqa: F401

import six


class SchemaValidationErrorMessage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'location': 'str',
        'message': 'str',
        'attribute_path': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'location': 'location',
        'message': 'message',
        'attribute_path': 'attributePath',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }


    def __init__(self, location=None, message=None, attribute_path=None, *args, **kwargs):  # noqa: E501
        """SchemaValidationErrorMessage - a model defined in Swagger"""  # noqa: E501
        self._location = None
        self._message = None
        self._attribute_path = None
        self.discriminator = None
        if location is not None:
            self._location = location
        if message is not None:
            self._message = message
        if attribute_path is not None:
            self._attribute_path = attribute_path
        self.__reserved = {"$fqObjectType": self._initialize_fq_object_type()}
        self.__unknown_fields = {}
        self.__object_type = self._initialize_object_type()

    def _initialize_object_type(self):
        return 'storage.v4.error.SchemaValidationErrorMessage'

    def _initialize_fq_object_type(self):
        return 'storage.v4.r0.a1.error.SchemaValidationErrorMessage'

    def get_object_type(self):
        return self.__object_type

    def get_reserved(self):
        return self.__reserved

    def get_unknown_fields(self):
        return self.__unknown_fields

    @property
    def location(self):
        """Gets the location of this SchemaValidationErrorMessage.  # noqa: E501


        :return: The location of this SchemaValidationErrorMessage.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this SchemaValidationErrorMessage.


        :param location: The location of this SchemaValidationErrorMessage.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def message(self):
        """Gets the message of this SchemaValidationErrorMessage.  # noqa: E501


        :return: The message of this SchemaValidationErrorMessage.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this SchemaValidationErrorMessage.


        :param message: The message of this SchemaValidationErrorMessage.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def attribute_path(self):
        """Gets the attribute_path of this SchemaValidationErrorMessage.  # noqa: E501


        :return: The attribute_path of this SchemaValidationErrorMessage.  # noqa: E501
        :rtype: str
        """
        return self._attribute_path

    @attribute_path.setter
    def attribute_path(self, attribute_path):
        """Sets the attribute_path of this SchemaValidationErrorMessage.


        :param attribute_path: The attribute_path of this SchemaValidationErrorMessage.  # noqa: E501
        :type: str
        """

        self._attribute_path = attribute_path

    @property
    def _reserved(self):
        """Gets the _reserved of this SchemaValidationErrorMessage.  # noqa: E501


        :return: The _reserved of this SchemaValidationErrorMessage.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self.__reserved

    @property
    def _object_type(self):
        """Gets the _object_type of this SchemaValidationErrorMessage.  # noqa: E501


        :return: The _object_type of this SchemaValidationErrorMessage.  # noqa: E501
        :rtype: str
        """
        return self.__object_type

    @property
    def _unknown_fields(self):
        """Gets the _unknown_fields of this SchemaValidationErrorMessage.  # noqa: E501


        :return: The _unknown_fields of this SchemaValidationErrorMessage.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self.__unknown_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SchemaValidationErrorMessage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SchemaValidationErrorMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

