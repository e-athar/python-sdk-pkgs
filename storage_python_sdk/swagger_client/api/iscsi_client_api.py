# coding: utf-8


"""
    Storage APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 16.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class IscsiClientApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_iscsi_client_by_id(self, clientId, **kwargs):  # noqa: E501
        """get_iscsi_client_by_id  # noqa: E501

        Query the iSCSI client identified by {clientId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_iscsi_client_by_id(clientId, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str clientId: The external identifier of the iSCSI Client. (required)
        :return: storage.v4.config.GetIscsiClientApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_iscsi_client_by_id_with_http_info(clientId, **kwargs)  # noqa: E501
        else:
            (data) = self.get_iscsi_client_by_id_with_http_info(clientId, **kwargs)  # noqa: E501
            return data

    def get_iscsi_client_by_id_with_http_info(self, clientId, **kwargs):  # noqa: E501
        """get_iscsi_client_by_id  # noqa: E501

        Query the iSCSI client identified by {clientId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_iscsi_client_by_id_with_http_info(clientId, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str clientId: The external identifier of the iSCSI Client. (required)
        :return: storage.v4.config.GetIscsiClientApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['clientId']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_iscsi_client_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'clientId' is set
        if ('clientId' not in params or
                params['clientId'] is None):
            raise ValueError("Missing the required parameter `clientId` when calling `get_iscsi_client_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'clientId' in params:
            path_params['clientId'] = params['clientId']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/storage/v4.0.a1/config/iscsi-clients/{clientId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='storage.v4.config.GetIscsiClientApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_iscsi_clients(self, **kwargs):  # noqa: E501
        """get_iscsi_clients  # noqa: E501

        Query for list of iSCSI clients.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_iscsi_clients(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int _page: A URL query parameter that specifies the page number of the result set.  Must be a positive integer between 0 and the maximum number of pages that are available for that resource.  Any number out of this range will be set to its nearest bound.  In other words, a page number of less than 0 would be set to 0 and a page number greater than the total available pages will be set to the last page. 
        :param int _limit: A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 0 and 500. Any number out of this range will be set to the default maximum number of records, which is 500. 
        :return: storage.v4.config.GetIscsiClientsApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_iscsi_clients_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_iscsi_clients_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_iscsi_clients_with_http_info(self, **kwargs):  # noqa: E501
        """get_iscsi_clients  # noqa: E501

        Query for list of iSCSI clients.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_iscsi_clients_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int _page: A URL query parameter that specifies the page number of the result set.  Must be a positive integer between 0 and the maximum number of pages that are available for that resource.  Any number out of this range will be set to its nearest bound.  In other words, a page number of less than 0 would be set to 0 and a page number greater than the total available pages will be set to the last page. 
        :param int _limit: A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 0 and 500. Any number out of this range will be set to the default maximum number of records, which is 500. 
        :return: storage.v4.config.GetIscsiClientsApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_page', '_limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_iscsi_clients" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_page' in params:
            query_params.append(('$page', params['_page']))  # noqa: E501
        if '_limit' in params:
            query_params.append(('$limit', params['_limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/storage/v4.0.a1/config/iscsi-clients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='storage.v4.config.GetIscsiClientsApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_iscsi_client_by_id(self, body, clientId, **kwargs):  # noqa: E501
        """update_iscsi_client_by_id  # noqa: E501

        Modify an existing iSCSI client configuration identified by {clientId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_iscsi_client_by_id(body, clientId, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param storage.v4.config.IscsiClient body: A model that represents iSCSI Client that can be associated with a volume group as an external attachment. (required)
        :param str clientId: The external identifier of the iSCSI Client. (required)
        :return: storage.v4.config.UpdateIscsiClientApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_iscsi_client_by_id_with_http_info(body, clientId, **kwargs)  # noqa: E501
        else:
            (data) = self.update_iscsi_client_by_id_with_http_info(body, clientId, **kwargs)  # noqa: E501
            return data

    def update_iscsi_client_by_id_with_http_info(self, body, clientId, **kwargs):  # noqa: E501
        """update_iscsi_client_by_id  # noqa: E501

        Modify an existing iSCSI client configuration identified by {clientId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_iscsi_client_by_id_with_http_info(body, clientId, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param storage.v4.config.IscsiClient body: A model that represents iSCSI Client that can be associated with a volume group as an external attachment. (required)
        :param str clientId: The external identifier of the iSCSI Client. (required)
        :return: storage.v4.config.UpdateIscsiClientApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'clientId']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_iscsi_client_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_iscsi_client_by_id`")  # noqa: E501
        # verify the required parameter 'clientId' is set
        if ('clientId' not in params or
                params['clientId'] is None):
            raise ValueError("Missing the required parameter `clientId` when calling `update_iscsi_client_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'clientId' in params:
            path_params['clientId'] = params['clientId']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/storage/v4.0.a1/config/iscsi-clients/{clientId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='storage.v4.config.UpdateIscsiClientApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
