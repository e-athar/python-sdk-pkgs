# coding: utf-8


"""
    Storage APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 16.1.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class VolumeGroupApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def associate_category(self, body, volumeGroupExtId, **kwargs):  # noqa: E501
        """associate_category  # noqa: E501

        Associate category to a Volume Group identified by {volumeExtId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.associate_category(body, volumeGroupExtId, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param storage.v4.config.CategoryEntityReferences body: The list of categories to be associated/disassociated with the Volume Group. (required)
        :param str volumeGroupExtId: The external identifier of the Volume Group. (required)
        :return: storage.v4.config.AssociateCategoryApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.associate_category_with_http_info(body, volumeGroupExtId, **kwargs)  # noqa: E501
        else:
            (data) = self.associate_category_with_http_info(body, volumeGroupExtId, **kwargs)  # noqa: E501
            return data

    def associate_category_with_http_info(self, body, volumeGroupExtId, **kwargs):  # noqa: E501
        """associate_category  # noqa: E501

        Associate category to a Volume Group identified by {volumeExtId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.associate_category_with_http_info(body, volumeGroupExtId, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param storage.v4.config.CategoryEntityReferences body: The list of categories to be associated/disassociated with the Volume Group. (required)
        :param str volumeGroupExtId: The external identifier of the Volume Group. (required)
        :return: storage.v4.config.AssociateCategoryApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'volumeGroupExtId']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method associate_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `associate_category`")  # noqa: E501
        # verify the required parameter 'volumeGroupExtId' is set
        if ('volumeGroupExtId' not in params or
                params['volumeGroupExtId'] is None):
            raise ValueError("Missing the required parameter `volumeGroupExtId` when calling `associate_category`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'volumeGroupExtId' in params:
            path_params['volumeGroupExtId'] = params['volumeGroupExtId']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/storage/v4.0.a1/config/volume-groups/{volumeGroupExtId}/$actions/associate-category', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='storage.v4.config.AssociateCategoryApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def attach_iscsi_client(self, body, volumeGroupExtId, **kwargs):  # noqa: E501
        """attach_iscsi_client  # noqa: E501

        Attach iSCSI initiator to a Volume Group identified by {volumeGroupExtId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attach_iscsi_client(body, volumeGroupExtId, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param storage.v4.config.IscsiClient body: A model that represents iSCSI Client that can be associated with a volume group as an external attachment. (required)
        :param str volumeGroupExtId: The external identifier of the Volume Group. (required)
        :return: storage.v4.config.AttachIscsiClientApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.attach_iscsi_client_with_http_info(body, volumeGroupExtId, **kwargs)  # noqa: E501
        else:
            (data) = self.attach_iscsi_client_with_http_info(body, volumeGroupExtId, **kwargs)  # noqa: E501
            return data

    def attach_iscsi_client_with_http_info(self, body, volumeGroupExtId, **kwargs):  # noqa: E501
        """attach_iscsi_client  # noqa: E501

        Attach iSCSI initiator to a Volume Group identified by {volumeGroupExtId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attach_iscsi_client_with_http_info(body, volumeGroupExtId, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param storage.v4.config.IscsiClient body: A model that represents iSCSI Client that can be associated with a volume group as an external attachment. (required)
        :param str volumeGroupExtId: The external identifier of the Volume Group. (required)
        :return: storage.v4.config.AttachIscsiClientApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'volumeGroupExtId']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attach_iscsi_client" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `attach_iscsi_client`")  # noqa: E501
        # verify the required parameter 'volumeGroupExtId' is set
        if ('volumeGroupExtId' not in params or
                params['volumeGroupExtId'] is None):
            raise ValueError("Missing the required parameter `volumeGroupExtId` when calling `attach_iscsi_client`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'volumeGroupExtId' in params:
            path_params['volumeGroupExtId'] = params['volumeGroupExtId']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/storage/v4.0.a1/config/volume-groups/{volumeGroupExtId}/$actions/attach-iscsi-client', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='storage.v4.config.AttachIscsiClientApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def attach_vm(self, body, volumeGroupExtId, **kwargs):  # noqa: E501
        """attach_vm  # noqa: E501

        Attach VM to a Volume Group identified by {volumeGroupExtId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attach_vm(body, volumeGroupExtId, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param storage.v4.config.VmAttachment body: A model that represents a VM reference that can be associated with a volume group as a hypervisor attachment. (required)
        :param str volumeGroupExtId: The external identifier of the Volume Group. (required)
        :return: storage.v4.config.AttachVmApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.attach_vm_with_http_info(body, volumeGroupExtId, **kwargs)  # noqa: E501
        else:
            (data) = self.attach_vm_with_http_info(body, volumeGroupExtId, **kwargs)  # noqa: E501
            return data

    def attach_vm_with_http_info(self, body, volumeGroupExtId, **kwargs):  # noqa: E501
        """attach_vm  # noqa: E501

        Attach VM to a Volume Group identified by {volumeGroupExtId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attach_vm_with_http_info(body, volumeGroupExtId, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param storage.v4.config.VmAttachment body: A model that represents a VM reference that can be associated with a volume group as a hypervisor attachment. (required)
        :param str volumeGroupExtId: The external identifier of the Volume Group. (required)
        :return: storage.v4.config.AttachVmApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'volumeGroupExtId']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attach_vm" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `attach_vm`")  # noqa: E501
        # verify the required parameter 'volumeGroupExtId' is set
        if ('volumeGroupExtId' not in params or
                params['volumeGroupExtId'] is None):
            raise ValueError("Missing the required parameter `volumeGroupExtId` when calling `attach_vm`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'volumeGroupExtId' in params:
            path_params['volumeGroupExtId'] = params['volumeGroupExtId']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/storage/v4.0.a1/config/volume-groups/{volumeGroupExtId}/$actions/attach-vm', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='storage.v4.config.AttachVmApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_volume_disk(self, body, volumeGroupExtId, **kwargs):  # noqa: E501
        """create_volume_disk  # noqa: E501

        Create a new Volume Disk.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_volume_disk(body, volumeGroupExtId, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param storage.v4.config.VolumeDisk body: A model that represents volume disk which is associated with a volume group, and is supported by a backing file on DSF. (required)
        :param str volumeGroupExtId: The external identifier of the Volume Group. (required)
        :return: storage.v4.config.CreateVolumeDiskApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_volume_disk_with_http_info(body, volumeGroupExtId, **kwargs)  # noqa: E501
        else:
            (data) = self.create_volume_disk_with_http_info(body, volumeGroupExtId, **kwargs)  # noqa: E501
            return data

    def create_volume_disk_with_http_info(self, body, volumeGroupExtId, **kwargs):  # noqa: E501
        """create_volume_disk  # noqa: E501

        Create a new Volume Disk.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_volume_disk_with_http_info(body, volumeGroupExtId, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param storage.v4.config.VolumeDisk body: A model that represents volume disk which is associated with a volume group, and is supported by a backing file on DSF. (required)
        :param str volumeGroupExtId: The external identifier of the Volume Group. (required)
        :return: storage.v4.config.CreateVolumeDiskApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'volumeGroupExtId']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_volume_disk" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_volume_disk`")  # noqa: E501
        # verify the required parameter 'volumeGroupExtId' is set
        if ('volumeGroupExtId' not in params or
                params['volumeGroupExtId'] is None):
            raise ValueError("Missing the required parameter `volumeGroupExtId` when calling `create_volume_disk`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'volumeGroupExtId' in params:
            path_params['volumeGroupExtId'] = params['volumeGroupExtId']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/storage/v4.0.a1/config/volume-groups/{volumeGroupExtId}/disks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='storage.v4.config.CreateVolumeDiskApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_volume_group(self, body, **kwargs):  # noqa: E501
        """create_volume_group  # noqa: E501

        Create a new Volume Group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_volume_group(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param storage.v4.config.VolumeGroup body: A model that represents Volume Group resources. (required)
        :return: storage.v4.config.CreateVolumeGroupApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_volume_group_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_volume_group_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_volume_group_with_http_info(self, body, **kwargs):  # noqa: E501
        """create_volume_group  # noqa: E501

        Create a new Volume Group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_volume_group_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param storage.v4.config.VolumeGroup body: A model that represents Volume Group resources. (required)
        :return: storage.v4.config.CreateVolumeGroupApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_volume_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_volume_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/storage/v4.0.a1/config/volume-groups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='storage.v4.config.CreateVolumeGroupApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_volume_disk(self, volumeGroupExtId, diskExtId, **kwargs):  # noqa: E501
        """delete_volume_disk  # noqa: E501

        Delete a Volume Disk identified by {diskExtId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_volume_disk(volumeGroupExtId, diskExtId, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str volumeGroupExtId: The external identifier of the Volume Group. (required)
        :param str diskExtId: The external identifier of the Volume Disk. (required)
        :return: storage.v4.config.DeleteVolumeDiskApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_volume_disk_with_http_info(volumeGroupExtId, diskExtId, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_volume_disk_with_http_info(volumeGroupExtId, diskExtId, **kwargs)  # noqa: E501
            return data

    def delete_volume_disk_with_http_info(self, volumeGroupExtId, diskExtId, **kwargs):  # noqa: E501
        """delete_volume_disk  # noqa: E501

        Delete a Volume Disk identified by {diskExtId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_volume_disk_with_http_info(volumeGroupExtId, diskExtId, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str volumeGroupExtId: The external identifier of the Volume Group. (required)
        :param str diskExtId: The external identifier of the Volume Disk. (required)
        :return: storage.v4.config.DeleteVolumeDiskApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['volumeGroupExtId', 'diskExtId']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_volume_disk" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'volumeGroupExtId' is set
        if ('volumeGroupExtId' not in params or
                params['volumeGroupExtId'] is None):
            raise ValueError("Missing the required parameter `volumeGroupExtId` when calling `delete_volume_disk`")  # noqa: E501
        # verify the required parameter 'diskExtId' is set
        if ('diskExtId' not in params or
                params['diskExtId'] is None):
            raise ValueError("Missing the required parameter `diskExtId` when calling `delete_volume_disk`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'volumeGroupExtId' in params:
            path_params['volumeGroupExtId'] = params['volumeGroupExtId']  # noqa: E501
        if 'diskExtId' in params:
            path_params['diskExtId'] = params['diskExtId']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/storage/v4.0.a1/config/volume-groups/{volumeGroupExtId}/disks/{diskExtId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='storage.v4.config.DeleteVolumeDiskApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_volume_group_by_id(self, extId, **kwargs):  # noqa: E501
        """delete_volume_group_by_id  # noqa: E501

        Delete the Volume Group identified by {extId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_volume_group_by_id(extId, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str extId: The external identifier of the Volume Group. (required)
        :return: storage.v4.config.DeleteVolumeGroupApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_volume_group_by_id_with_http_info(extId, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_volume_group_by_id_with_http_info(extId, **kwargs)  # noqa: E501
            return data

    def delete_volume_group_by_id_with_http_info(self, extId, **kwargs):  # noqa: E501
        """delete_volume_group_by_id  # noqa: E501

        Delete the Volume Group identified by {extId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_volume_group_by_id_with_http_info(extId, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str extId: The external identifier of the Volume Group. (required)
        :return: storage.v4.config.DeleteVolumeGroupApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['extId']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_volume_group_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'extId' is set
        if ('extId' not in params or
                params['extId'] is None):
            raise ValueError("Missing the required parameter `extId` when calling `delete_volume_group_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'extId' in params:
            path_params['extId'] = params['extId']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/storage/v4.0.a1/config/volume-groups/{extId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='storage.v4.config.DeleteVolumeGroupApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def detach_iscsi_client(self, volumeGroupExtId, clientId, **kwargs):  # noqa: E501
        """detach_iscsi_client  # noqa: E501

        Detach iSCSI initiator identified by {clientId} from a Volume Group {volumeGroupExtId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.detach_iscsi_client(volumeGroupExtId, clientId, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str volumeGroupExtId: The external identifier of the Volume Group. (required)
        :param str clientId: The external identifier of the iSCSI Client. (required)
        :return: storage.v4.config.DetachIscsiClientApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.detach_iscsi_client_with_http_info(volumeGroupExtId, clientId, **kwargs)  # noqa: E501
        else:
            (data) = self.detach_iscsi_client_with_http_info(volumeGroupExtId, clientId, **kwargs)  # noqa: E501
            return data

    def detach_iscsi_client_with_http_info(self, volumeGroupExtId, clientId, **kwargs):  # noqa: E501
        """detach_iscsi_client  # noqa: E501

        Detach iSCSI initiator identified by {clientId} from a Volume Group {volumeGroupExtId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.detach_iscsi_client_with_http_info(volumeGroupExtId, clientId, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str volumeGroupExtId: The external identifier of the Volume Group. (required)
        :param str clientId: The external identifier of the iSCSI Client. (required)
        :return: storage.v4.config.DetachIscsiClientApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['volumeGroupExtId', 'clientId']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method detach_iscsi_client" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'volumeGroupExtId' is set
        if ('volumeGroupExtId' not in params or
                params['volumeGroupExtId'] is None):
            raise ValueError("Missing the required parameter `volumeGroupExtId` when calling `detach_iscsi_client`")  # noqa: E501
        # verify the required parameter 'clientId' is set
        if ('clientId' not in params or
                params['clientId'] is None):
            raise ValueError("Missing the required parameter `clientId` when calling `detach_iscsi_client`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'volumeGroupExtId' in params:
            path_params['volumeGroupExtId'] = params['volumeGroupExtId']  # noqa: E501
        if 'clientId' in params:
            path_params['clientId'] = params['clientId']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/storage/v4.0.a1/config/volume-groups/{volumeGroupExtId}/$actions/detach-iscsi-client/{clientId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='storage.v4.config.DetachIscsiClientApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def detach_vm(self, volumeGroupExtId, vmExtId, **kwargs):  # noqa: E501
        """detach_vm  # noqa: E501

        Detach VM identified by {vmExtId} from a Volume Group {volumeGroupExtId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.detach_vm(volumeGroupExtId, vmExtId, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str volumeGroupExtId: The external identifier of the Volume Group. (required)
        :param str vmExtId: The external identifier of the VM. (required)
        :return: storage.v4.config.DetachVmApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.detach_vm_with_http_info(volumeGroupExtId, vmExtId, **kwargs)  # noqa: E501
        else:
            (data) = self.detach_vm_with_http_info(volumeGroupExtId, vmExtId, **kwargs)  # noqa: E501
            return data

    def detach_vm_with_http_info(self, volumeGroupExtId, vmExtId, **kwargs):  # noqa: E501
        """detach_vm  # noqa: E501

        Detach VM identified by {vmExtId} from a Volume Group {volumeGroupExtId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.detach_vm_with_http_info(volumeGroupExtId, vmExtId, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str volumeGroupExtId: The external identifier of the Volume Group. (required)
        :param str vmExtId: The external identifier of the VM. (required)
        :return: storage.v4.config.DetachVmApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['volumeGroupExtId', 'vmExtId']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method detach_vm" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'volumeGroupExtId' is set
        if ('volumeGroupExtId' not in params or
                params['volumeGroupExtId'] is None):
            raise ValueError("Missing the required parameter `volumeGroupExtId` when calling `detach_vm`")  # noqa: E501
        # verify the required parameter 'vmExtId' is set
        if ('vmExtId' not in params or
                params['vmExtId'] is None):
            raise ValueError("Missing the required parameter `vmExtId` when calling `detach_vm`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'volumeGroupExtId' in params:
            path_params['volumeGroupExtId'] = params['volumeGroupExtId']  # noqa: E501
        if 'vmExtId' in params:
            path_params['vmExtId'] = params['vmExtId']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/storage/v4.0.a1/config/volume-groups/{volumeGroupExtId}/$actions/detach-vm/{vmExtId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='storage.v4.config.DetachVmApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def disassociate_category(self, body, volumeGroupExtId, **kwargs):  # noqa: E501
        """disassociate_category  # noqa: E501

        Disassociate category from a Volume Group identified by {volumeExtId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.disassociate_category(body, volumeGroupExtId, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param storage.v4.config.CategoryEntityReferences body: The list of categories to be associated/disassociated with the Volume Group. (required)
        :param str volumeGroupExtId: The external identifier of the Volume Group. (required)
        :return: storage.v4.config.DisassociateCategoryApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.disassociate_category_with_http_info(body, volumeGroupExtId, **kwargs)  # noqa: E501
        else:
            (data) = self.disassociate_category_with_http_info(body, volumeGroupExtId, **kwargs)  # noqa: E501
            return data

    def disassociate_category_with_http_info(self, body, volumeGroupExtId, **kwargs):  # noqa: E501
        """disassociate_category  # noqa: E501

        Disassociate category from a Volume Group identified by {volumeExtId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.disassociate_category_with_http_info(body, volumeGroupExtId, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param storage.v4.config.CategoryEntityReferences body: The list of categories to be associated/disassociated with the Volume Group. (required)
        :param str volumeGroupExtId: The external identifier of the Volume Group. (required)
        :return: storage.v4.config.DisassociateCategoryApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'volumeGroupExtId']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method disassociate_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `disassociate_category`")  # noqa: E501
        # verify the required parameter 'volumeGroupExtId' is set
        if ('volumeGroupExtId' not in params or
                params['volumeGroupExtId'] is None):
            raise ValueError("Missing the required parameter `volumeGroupExtId` when calling `disassociate_category`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'volumeGroupExtId' in params:
            path_params['volumeGroupExtId'] = params['volumeGroupExtId']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/storage/v4.0.a1/config/volume-groups/{volumeGroupExtId}/$actions/disassociate-category', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='storage.v4.config.DisassociateCategoryApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_category_associations(self, volumeGroupExtId, **kwargs):  # noqa: E501
        """get_category_associations  # noqa: E501

        Query the category details which are associated with the Volume Group identified by {volumeExtId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_category_associations(volumeGroupExtId, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str volumeGroupExtId: The external identifier of the Volume Group. (required)
        :param int _page: A URL query parameter that specifies the page number of the result set.  Must be a positive integer between 0 and the maximum number of pages that are available for that resource.  Any number out of this range will be set to its nearest bound.  In other words, a page number of less than 0 would be set to 0 and a page number greater than the total available pages will be set to the last page. 
        :param int _limit: A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 0 and 500. Any number out of this range will be set to the default maximum number of records, which is 500. 
        :return: storage.v4.config.GetCategoryAssociationsApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_category_associations_with_http_info(volumeGroupExtId, **kwargs)  # noqa: E501
        else:
            (data) = self.get_category_associations_with_http_info(volumeGroupExtId, **kwargs)  # noqa: E501
            return data

    def get_category_associations_with_http_info(self, volumeGroupExtId, **kwargs):  # noqa: E501
        """get_category_associations  # noqa: E501

        Query the category details which are associated with the Volume Group identified by {volumeExtId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_category_associations_with_http_info(volumeGroupExtId, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str volumeGroupExtId: The external identifier of the Volume Group. (required)
        :param int _page: A URL query parameter that specifies the page number of the result set.  Must be a positive integer between 0 and the maximum number of pages that are available for that resource.  Any number out of this range will be set to its nearest bound.  In other words, a page number of less than 0 would be set to 0 and a page number greater than the total available pages will be set to the last page. 
        :param int _limit: A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 0 and 500. Any number out of this range will be set to the default maximum number of records, which is 500. 
        :return: storage.v4.config.GetCategoryAssociationsApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['volumeGroupExtId', '_page', '_limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_category_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'volumeGroupExtId' is set
        if ('volumeGroupExtId' not in params or
                params['volumeGroupExtId'] is None):
            raise ValueError("Missing the required parameter `volumeGroupExtId` when calling `get_category_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'volumeGroupExtId' in params:
            path_params['volumeGroupExtId'] = params['volumeGroupExtId']  # noqa: E501

        query_params = []
        if '_page' in params:
            query_params.append(('$page', params['_page']))  # noqa: E501
        if '_limit' in params:
            query_params.append(('$limit', params['_limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/storage/v4.0.a1/config/volume-groups/{volumeGroupExtId}/category-associations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='storage.v4.config.GetCategoryAssociationsApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_external_attachments(self, volumeGroupExtId, **kwargs):  # noqa: E501
        """get_external_attachments  # noqa: E501

        Query the list of External Attachments for a Volume Group identified by {volumeGroupExtId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_external_attachments(volumeGroupExtId, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str volumeGroupExtId: The external identifier of the Volume Group. (required)
        :param int _page: A URL query parameter that specifies the page number of the result set.  Must be a positive integer between 0 and the maximum number of pages that are available for that resource.  Any number out of this range will be set to its nearest bound.  In other words, a page number of less than 0 would be set to 0 and a page number greater than the total available pages will be set to the last page. 
        :param int _limit: A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 0 and 500. Any number out of this range will be set to the default maximum number of records, which is 500. 
        :return: storage.v4.config.GetExternalAttachmentsApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_external_attachments_with_http_info(volumeGroupExtId, **kwargs)  # noqa: E501
        else:
            (data) = self.get_external_attachments_with_http_info(volumeGroupExtId, **kwargs)  # noqa: E501
            return data

    def get_external_attachments_with_http_info(self, volumeGroupExtId, **kwargs):  # noqa: E501
        """get_external_attachments  # noqa: E501

        Query the list of External Attachments for a Volume Group identified by {volumeGroupExtId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_external_attachments_with_http_info(volumeGroupExtId, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str volumeGroupExtId: The external identifier of the Volume Group. (required)
        :param int _page: A URL query parameter that specifies the page number of the result set.  Must be a positive integer between 0 and the maximum number of pages that are available for that resource.  Any number out of this range will be set to its nearest bound.  In other words, a page number of less than 0 would be set to 0 and a page number greater than the total available pages will be set to the last page. 
        :param int _limit: A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 0 and 500. Any number out of this range will be set to the default maximum number of records, which is 500. 
        :return: storage.v4.config.GetExternalAttachmentsApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['volumeGroupExtId', '_page', '_limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_external_attachments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'volumeGroupExtId' is set
        if ('volumeGroupExtId' not in params or
                params['volumeGroupExtId'] is None):
            raise ValueError("Missing the required parameter `volumeGroupExtId` when calling `get_external_attachments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'volumeGroupExtId' in params:
            path_params['volumeGroupExtId'] = params['volumeGroupExtId']  # noqa: E501

        query_params = []
        if '_page' in params:
            query_params.append(('$page', params['_page']))  # noqa: E501
        if '_limit' in params:
            query_params.append(('$limit', params['_limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/storage/v4.0.a1/config/volume-groups/{volumeGroupExtId}/iscsi-client-attachments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='storage.v4.config.GetExternalAttachmentsApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vm_attachments(self, volumeGroupExtId, **kwargs):  # noqa: E501
        """get_vm_attachments  # noqa: E501

        Query the list of VM Attachments for a Volume Group identified by {volumeGroupExtId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vm_attachments(volumeGroupExtId, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str volumeGroupExtId: The external identifier of the Volume Group. (required)
        :param int _page: A URL query parameter that specifies the page number of the result set.  Must be a positive integer between 0 and the maximum number of pages that are available for that resource.  Any number out of this range will be set to its nearest bound.  In other words, a page number of less than 0 would be set to 0 and a page number greater than the total available pages will be set to the last page. 
        :param int _limit: A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 0 and 500. Any number out of this range will be set to the default maximum number of records, which is 500. 
        :return: storage.v4.config.GetVmAttachmentsApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vm_attachments_with_http_info(volumeGroupExtId, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vm_attachments_with_http_info(volumeGroupExtId, **kwargs)  # noqa: E501
            return data

    def get_vm_attachments_with_http_info(self, volumeGroupExtId, **kwargs):  # noqa: E501
        """get_vm_attachments  # noqa: E501

        Query the list of VM Attachments for a Volume Group identified by {volumeGroupExtId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vm_attachments_with_http_info(volumeGroupExtId, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str volumeGroupExtId: The external identifier of the Volume Group. (required)
        :param int _page: A URL query parameter that specifies the page number of the result set.  Must be a positive integer between 0 and the maximum number of pages that are available for that resource.  Any number out of this range will be set to its nearest bound.  In other words, a page number of less than 0 would be set to 0 and a page number greater than the total available pages will be set to the last page. 
        :param int _limit: A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 0 and 500. Any number out of this range will be set to the default maximum number of records, which is 500. 
        :return: storage.v4.config.GetVmAttachmentsApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['volumeGroupExtId', '_page', '_limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vm_attachments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'volumeGroupExtId' is set
        if ('volumeGroupExtId' not in params or
                params['volumeGroupExtId'] is None):
            raise ValueError("Missing the required parameter `volumeGroupExtId` when calling `get_vm_attachments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'volumeGroupExtId' in params:
            path_params['volumeGroupExtId'] = params['volumeGroupExtId']  # noqa: E501

        query_params = []
        if '_page' in params:
            query_params.append(('$page', params['_page']))  # noqa: E501
        if '_limit' in params:
            query_params.append(('$limit', params['_limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/storage/v4.0.a1/config/volume-groups/{volumeGroupExtId}/vm-attachments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='storage.v4.config.GetVmAttachmentsApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_volume_disk_by_id(self, volumeGroupExtId, diskExtId, **kwargs):  # noqa: E501
        """get_volume_disk_by_id  # noqa: E501

        Query the Volume Disk identified by {diskExtId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_volume_disk_by_id(volumeGroupExtId, diskExtId, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str volumeGroupExtId: The external identifier of the Volume Group. (required)
        :param str diskExtId: The external identifier of the Volume Disk. (required)
        :return: storage.v4.config.GetVolumeDiskApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_volume_disk_by_id_with_http_info(volumeGroupExtId, diskExtId, **kwargs)  # noqa: E501
        else:
            (data) = self.get_volume_disk_by_id_with_http_info(volumeGroupExtId, diskExtId, **kwargs)  # noqa: E501
            return data

    def get_volume_disk_by_id_with_http_info(self, volumeGroupExtId, diskExtId, **kwargs):  # noqa: E501
        """get_volume_disk_by_id  # noqa: E501

        Query the Volume Disk identified by {diskExtId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_volume_disk_by_id_with_http_info(volumeGroupExtId, diskExtId, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str volumeGroupExtId: The external identifier of the Volume Group. (required)
        :param str diskExtId: The external identifier of the Volume Disk. (required)
        :return: storage.v4.config.GetVolumeDiskApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['volumeGroupExtId', 'diskExtId']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_volume_disk_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'volumeGroupExtId' is set
        if ('volumeGroupExtId' not in params or
                params['volumeGroupExtId'] is None):
            raise ValueError("Missing the required parameter `volumeGroupExtId` when calling `get_volume_disk_by_id`")  # noqa: E501
        # verify the required parameter 'diskExtId' is set
        if ('diskExtId' not in params or
                params['diskExtId'] is None):
            raise ValueError("Missing the required parameter `diskExtId` when calling `get_volume_disk_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'volumeGroupExtId' in params:
            path_params['volumeGroupExtId'] = params['volumeGroupExtId']  # noqa: E501
        if 'diskExtId' in params:
            path_params['diskExtId'] = params['diskExtId']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/storage/v4.0.a1/config/volume-groups/{volumeGroupExtId}/disks/{diskExtId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='storage.v4.config.GetVolumeDiskApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_volume_disks(self, volumeGroupExtId, **kwargs):  # noqa: E501
        """get_volume_disks  # noqa: E501

        Query the list of disks corresponding to a volume group identified by {volumeGroupExtId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_volume_disks(volumeGroupExtId, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str volumeGroupExtId: The external identifier of the Volume Group. (required)
        :param int _page: A URL query parameter that specifies the page number of the result set.  Must be a positive integer between 0 and the maximum number of pages that are available for that resource.  Any number out of this range will be set to its nearest bound.  In other words, a page number of less than 0 would be set to 0 and a page number greater than the total available pages will be set to the last page. 
        :param int _limit: A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 0 and 500. Any number out of this range will be set to the default maximum number of records, which is 500. 
        :return: storage.v4.config.GetVolumeDisksApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_volume_disks_with_http_info(volumeGroupExtId, **kwargs)  # noqa: E501
        else:
            (data) = self.get_volume_disks_with_http_info(volumeGroupExtId, **kwargs)  # noqa: E501
            return data

    def get_volume_disks_with_http_info(self, volumeGroupExtId, **kwargs):  # noqa: E501
        """get_volume_disks  # noqa: E501

        Query the list of disks corresponding to a volume group identified by {volumeGroupExtId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_volume_disks_with_http_info(volumeGroupExtId, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str volumeGroupExtId: The external identifier of the Volume Group. (required)
        :param int _page: A URL query parameter that specifies the page number of the result set.  Must be a positive integer between 0 and the maximum number of pages that are available for that resource.  Any number out of this range will be set to its nearest bound.  In other words, a page number of less than 0 would be set to 0 and a page number greater than the total available pages will be set to the last page. 
        :param int _limit: A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 0 and 500. Any number out of this range will be set to the default maximum number of records, which is 500. 
        :return: storage.v4.config.GetVolumeDisksApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['volumeGroupExtId', '_page', '_limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_volume_disks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'volumeGroupExtId' is set
        if ('volumeGroupExtId' not in params or
                params['volumeGroupExtId'] is None):
            raise ValueError("Missing the required parameter `volumeGroupExtId` when calling `get_volume_disks`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'volumeGroupExtId' in params:
            path_params['volumeGroupExtId'] = params['volumeGroupExtId']  # noqa: E501

        query_params = []
        if '_page' in params:
            query_params.append(('$page', params['_page']))  # noqa: E501
        if '_limit' in params:
            query_params.append(('$limit', params['_limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/storage/v4.0.a1/config/volume-groups/{volumeGroupExtId}/disks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='storage.v4.config.GetVolumeDisksApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_volume_group_by_id(self, extId, **kwargs):  # noqa: E501
        """get_volume_group_by_id  # noqa: E501

        Query the Volume Group identified by {extId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_volume_group_by_id(extId, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str extId: The external identifier of the Volume Group. (required)
        :return: storage.v4.config.GetVolumeGroupApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_volume_group_by_id_with_http_info(extId, **kwargs)  # noqa: E501
        else:
            (data) = self.get_volume_group_by_id_with_http_info(extId, **kwargs)  # noqa: E501
            return data

    def get_volume_group_by_id_with_http_info(self, extId, **kwargs):  # noqa: E501
        """get_volume_group_by_id  # noqa: E501

        Query the Volume Group identified by {extId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_volume_group_by_id_with_http_info(extId, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str extId: The external identifier of the Volume Group. (required)
        :return: storage.v4.config.GetVolumeGroupApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['extId']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_volume_group_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'extId' is set
        if ('extId' not in params or
                params['extId'] is None):
            raise ValueError("Missing the required parameter `extId` when calling `get_volume_group_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'extId' in params:
            path_params['extId'] = params['extId']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/storage/v4.0.a1/config/volume-groups/{extId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='storage.v4.config.GetVolumeGroupApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_volume_groups(self, **kwargs):  # noqa: E501
        """get_volume_groups  # noqa: E501

        Query the list of Volume Groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_volume_groups(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int _page: A URL query parameter that specifies the page number of the result set.  Must be a positive integer between 0 and the maximum number of pages that are available for that resource.  Any number out of this range will be set to its nearest bound.  In other words, a page number of less than 0 would be set to 0 and a page number greater than the total available pages will be set to the last page. 
        :param int _limit: A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 0 and 500. Any number out of this range will be set to the default maximum number of records, which is 500. 
        :return: storage.v4.config.GetVolumeGroupsApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_volume_groups_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_volume_groups_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_volume_groups_with_http_info(self, **kwargs):  # noqa: E501
        """get_volume_groups  # noqa: E501

        Query the list of Volume Groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_volume_groups_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int _page: A URL query parameter that specifies the page number of the result set.  Must be a positive integer between 0 and the maximum number of pages that are available for that resource.  Any number out of this range will be set to its nearest bound.  In other words, a page number of less than 0 would be set to 0 and a page number greater than the total available pages will be set to the last page. 
        :param int _limit: A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 0 and 500. Any number out of this range will be set to the default maximum number of records, which is 500. 
        :return: storage.v4.config.GetVolumeGroupsApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_page', '_limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_volume_groups" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_page' in params:
            query_params.append(('$page', params['_page']))  # noqa: E501
        if '_limit' in params:
            query_params.append(('$limit', params['_limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/storage/v4.0.a1/config/volume-groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='storage.v4.config.GetVolumeGroupsApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def migrate_volume_group(self, body, volumeGroupExtId, **kwargs):  # noqa: E501
        """migrate_volume_group  # noqa: E501

        Migrate Volume Group identified by {volumeExtId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.migrate_volume_group(body, volumeGroupExtId, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param storage.v4.config.VolumeGroupMigrationSpec body: Specification for the migrate action on the Volume Group. (required)
        :param str volumeGroupExtId: The external identifier of the Volume Group. (required)
        :return: storage.v4.config.MigrateVolumeGroupApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.migrate_volume_group_with_http_info(body, volumeGroupExtId, **kwargs)  # noqa: E501
        else:
            (data) = self.migrate_volume_group_with_http_info(body, volumeGroupExtId, **kwargs)  # noqa: E501
            return data

    def migrate_volume_group_with_http_info(self, body, volumeGroupExtId, **kwargs):  # noqa: E501
        """migrate_volume_group  # noqa: E501

        Migrate Volume Group identified by {volumeExtId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.migrate_volume_group_with_http_info(body, volumeGroupExtId, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param storage.v4.config.VolumeGroupMigrationSpec body: Specification for the migrate action on the Volume Group. (required)
        :param str volumeGroupExtId: The external identifier of the Volume Group. (required)
        :return: storage.v4.config.MigrateVolumeGroupApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'volumeGroupExtId']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method migrate_volume_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `migrate_volume_group`")  # noqa: E501
        # verify the required parameter 'volumeGroupExtId' is set
        if ('volumeGroupExtId' not in params or
                params['volumeGroupExtId'] is None):
            raise ValueError("Missing the required parameter `volumeGroupExtId` when calling `migrate_volume_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'volumeGroupExtId' in params:
            path_params['volumeGroupExtId'] = params['volumeGroupExtId']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/storage/v4.0.a1/config/volume-groups/{volumeGroupExtId}/$actions/migrate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='storage.v4.config.MigrateVolumeGroupApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_volume_disk(self, body, volumeGroupExtId, diskExtId, **kwargs):  # noqa: E501
        """update_volume_disk  # noqa: E501

        Update a Volume Disk identified by {diskExtId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_volume_disk(body, volumeGroupExtId, diskExtId, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param storage.v4.config.VolumeDisk body: A model that represents volume disk which is associated with a volume group, and is supported by a backing file on DSF. (required)
        :param str volumeGroupExtId: The external identifier of the Volume Group. (required)
        :param str diskExtId: The external identifier of the Volume Disk. (required)
        :return: storage.v4.config.UpdateVolumeDiskApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_volume_disk_with_http_info(body, volumeGroupExtId, diskExtId, **kwargs)  # noqa: E501
        else:
            (data) = self.update_volume_disk_with_http_info(body, volumeGroupExtId, diskExtId, **kwargs)  # noqa: E501
            return data

    def update_volume_disk_with_http_info(self, body, volumeGroupExtId, diskExtId, **kwargs):  # noqa: E501
        """update_volume_disk  # noqa: E501

        Update a Volume Disk identified by {diskExtId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_volume_disk_with_http_info(body, volumeGroupExtId, diskExtId, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param storage.v4.config.VolumeDisk body: A model that represents volume disk which is associated with a volume group, and is supported by a backing file on DSF. (required)
        :param str volumeGroupExtId: The external identifier of the Volume Group. (required)
        :param str diskExtId: The external identifier of the Volume Disk. (required)
        :return: storage.v4.config.UpdateVolumeDiskApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'volumeGroupExtId', 'diskExtId']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_volume_disk" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_volume_disk`")  # noqa: E501
        # verify the required parameter 'volumeGroupExtId' is set
        if ('volumeGroupExtId' not in params or
                params['volumeGroupExtId'] is None):
            raise ValueError("Missing the required parameter `volumeGroupExtId` when calling `update_volume_disk`")  # noqa: E501
        # verify the required parameter 'diskExtId' is set
        if ('diskExtId' not in params or
                params['diskExtId'] is None):
            raise ValueError("Missing the required parameter `diskExtId` when calling `update_volume_disk`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'volumeGroupExtId' in params:
            path_params['volumeGroupExtId'] = params['volumeGroupExtId']  # noqa: E501
        if 'diskExtId' in params:
            path_params['diskExtId'] = params['diskExtId']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/storage/v4.0.a1/config/volume-groups/{volumeGroupExtId}/disks/{diskExtId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='storage.v4.config.UpdateVolumeDiskApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_volume_group_by_id(self, body, extId, **kwargs):  # noqa: E501
        """update_volume_group_by_id  # noqa: E501

        Update details of a Volume Group identified by {extId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_volume_group_by_id(body, extId, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param storage.v4.config.VolumeGroup body: A model that represents Volume Group resources. (required)
        :param str extId: The external identifier of the Volume Group. (required)
        :return: storage.v4.config.UpdateVolumeGroupApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_volume_group_by_id_with_http_info(body, extId, **kwargs)  # noqa: E501
        else:
            (data) = self.update_volume_group_by_id_with_http_info(body, extId, **kwargs)  # noqa: E501
            return data

    def update_volume_group_by_id_with_http_info(self, body, extId, **kwargs):  # noqa: E501
        """update_volume_group_by_id  # noqa: E501

        Update details of a Volume Group identified by {extId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_volume_group_by_id_with_http_info(body, extId, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param storage.v4.config.VolumeGroup body: A model that represents Volume Group resources. (required)
        :param str extId: The external identifier of the Volume Group. (required)
        :return: storage.v4.config.UpdateVolumeGroupApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'extId']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_volume_group_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_volume_group_by_id`")  # noqa: E501
        # verify the required parameter 'extId' is set
        if ('extId' not in params or
                params['extId'] is None):
            raise ValueError("Missing the required parameter `extId` when calling `update_volume_group_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'extId' in params:
            path_params['extId'] = params['extId']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/storage/v4.0.a1/config/volume-groups/{extId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='storage.v4.config.UpdateVolumeGroupApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
